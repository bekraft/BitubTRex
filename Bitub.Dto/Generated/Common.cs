// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bitub.Dto {

  /// <summary>Holder for reflection information generated from Common.proto</summary>
  public static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for Common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxDb21tb24ucHJvdG8SCUJpdHViLkR0byITCgRHdWlkEgsKA3JhdxgBIAEo",
            "DCJYCg5HbG9iYWxVbmlxdWVJZBIfCgRndWlkGAEgASgLMg8uQml0dWIuRHRv",
            "Lkd1aWRIABIQCgZiYXNlNjQYAiABKAlIAEITChFudW1lcmljYWxPclN0cmlu",
            "ZyJrCglRdWFsaWZpZXISLgoJYW5vbnltb3VzGAEgASgLMhkuQml0dWIuRHRv",
            "Lkdsb2JhbFVuaXF1ZUlkSAASIAoFbmFtZWQYAiABKAsyDy5CaXR1Yi5EdG8u",
            "TmFtZUgAQgwKCmd1aWRPck5hbWUiFQoETmFtZRINCgVmcmFncxgCIAMoCSIw",
            "CgpDbGFzc2lmaWVyEiIKBHBhdGgYASADKAsyFC5CaXR1Yi5EdG8uUXVhbGlm",
            "aWVyIkwKBVJlZklkEg0KA25pZBgBIAEoBUgAEiMKA3NpZBgCIAEoCzIULkJp",
            "dHViLkR0by5RdWFsaWZpZXJIAEIPCg1sb2NhbE9yR2xvYmFsQhcKCWJpdHVi",
            "LmR0b6oCCUJpdHViLkR0b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Guid), global::Bitub.Dto.Guid.Parser, new[]{ "Raw" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.GlobalUniqueId), global::Bitub.Dto.GlobalUniqueId.Parser, new[]{ "Guid", "Base64" }, new[]{ "NumericalOrString" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Qualifier), global::Bitub.Dto.Qualifier.Parser, new[]{ "Anonymous", "Named" }, new[]{ "GuidOrName" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Name), global::Bitub.Dto.Name.Parser, new[]{ "Frags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Classifier), global::Bitub.Dto.Classifier.Parser, new[]{ "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.RefId), global::Bitub.Dto.RefId.Parser, new[]{ "Nid", "Sid" }, new[]{ "LocalOrGlobal" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Raw GUID
  /// </summary>
  public sealed partial class Guid : pb::IMessage<Guid> {
    private static readonly pb::MessageParser<Guid> _parser = new pb::MessageParser<Guid>(() => new Guid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Guid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Guid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Guid(Guid other) : this() {
      raw_ = other.raw_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Guid Clone() {
      return new Guid(this);
    }

    /// <summary>Field number for the "raw" field.</summary>
    public const int RawFieldNumber = 1;
    private pb::ByteString raw_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Raw {
      get { return raw_; }
      set {
        raw_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Guid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Guid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Raw != other.Raw) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Raw.Length != 0) hash ^= Raw.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Raw.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Raw);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Raw.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Raw);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Guid other) {
      if (other == null) {
        return;
      }
      if (other.Raw.Length != 0) {
        Raw = other.Raw;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Raw = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Global Unique ID is either binary or base64 representation
  /// </summary>
  public sealed partial class GlobalUniqueId : pb::IMessage<GlobalUniqueId> {
    private static readonly pb::MessageParser<GlobalUniqueId> _parser = new pb::MessageParser<GlobalUniqueId>(() => new GlobalUniqueId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GlobalUniqueId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.CommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalUniqueId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalUniqueId(GlobalUniqueId other) : this() {
      switch (other.NumericalOrStringCase) {
        case NumericalOrStringOneofCase.Guid:
          Guid = other.Guid.Clone();
          break;
        case NumericalOrStringOneofCase.Base64:
          Base64 = other.Base64;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalUniqueId Clone() {
      return new GlobalUniqueId(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Guid Guid {
      get { return numericalOrStringCase_ == NumericalOrStringOneofCase.Guid ? (global::Bitub.Dto.Guid) numericalOrString_ : null; }
      set {
        numericalOrString_ = value;
        numericalOrStringCase_ = value == null ? NumericalOrStringOneofCase.None : NumericalOrStringOneofCase.Guid;
      }
    }

    /// <summary>Field number for the "base64" field.</summary>
    public const int Base64FieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Base64 {
      get { return numericalOrStringCase_ == NumericalOrStringOneofCase.Base64 ? (string) numericalOrString_ : ""; }
      set {
        numericalOrString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        numericalOrStringCase_ = NumericalOrStringOneofCase.Base64;
      }
    }

    private object numericalOrString_;
    /// <summary>Enum of possible cases for the "numericalOrString" oneof.</summary>
    public enum NumericalOrStringOneofCase {
      None = 0,
      Guid = 1,
      Base64 = 2,
    }
    private NumericalOrStringOneofCase numericalOrStringCase_ = NumericalOrStringOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumericalOrStringOneofCase NumericalOrStringCase {
      get { return numericalOrStringCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNumericalOrString() {
      numericalOrStringCase_ = NumericalOrStringOneofCase.None;
      numericalOrString_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GlobalUniqueId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GlobalUniqueId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Guid, other.Guid)) return false;
      if (Base64 != other.Base64) return false;
      if (NumericalOrStringCase != other.NumericalOrStringCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (numericalOrStringCase_ == NumericalOrStringOneofCase.Guid) hash ^= Guid.GetHashCode();
      if (numericalOrStringCase_ == NumericalOrStringOneofCase.Base64) hash ^= Base64.GetHashCode();
      hash ^= (int) numericalOrStringCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (numericalOrStringCase_ == NumericalOrStringOneofCase.Guid) {
        output.WriteRawTag(10);
        output.WriteMessage(Guid);
      }
      if (numericalOrStringCase_ == NumericalOrStringOneofCase.Base64) {
        output.WriteRawTag(18);
        output.WriteString(Base64);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (numericalOrStringCase_ == NumericalOrStringOneofCase.Guid) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Guid);
      }
      if (numericalOrStringCase_ == NumericalOrStringOneofCase.Base64) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Base64);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GlobalUniqueId other) {
      if (other == null) {
        return;
      }
      switch (other.NumericalOrStringCase) {
        case NumericalOrStringOneofCase.Guid:
          if (Guid == null) {
            Guid = new global::Bitub.Dto.Guid();
          }
          Guid.MergeFrom(other.Guid);
          break;
        case NumericalOrStringOneofCase.Base64:
          Base64 = other.Base64;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Bitub.Dto.Guid subBuilder = new global::Bitub.Dto.Guid();
            if (numericalOrStringCase_ == NumericalOrStringOneofCase.Guid) {
              subBuilder.MergeFrom(Guid);
            }
            input.ReadMessage(subBuilder);
            Guid = subBuilder;
            break;
          }
          case 18: {
            Base64 = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Qualifier either by GUID or name
  /// </summary>
  public sealed partial class Qualifier : pb::IMessage<Qualifier> {
    private static readonly pb::MessageParser<Qualifier> _parser = new pb::MessageParser<Qualifier>(() => new Qualifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Qualifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.CommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Qualifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Qualifier(Qualifier other) : this() {
      switch (other.GuidOrNameCase) {
        case GuidOrNameOneofCase.Anonymous:
          Anonymous = other.Anonymous.Clone();
          break;
        case GuidOrNameOneofCase.Named:
          Named = other.Named.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Qualifier Clone() {
      return new Qualifier(this);
    }

    /// <summary>Field number for the "anonymous" field.</summary>
    public const int AnonymousFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.GlobalUniqueId Anonymous {
      get { return guidOrNameCase_ == GuidOrNameOneofCase.Anonymous ? (global::Bitub.Dto.GlobalUniqueId) guidOrName_ : null; }
      set {
        guidOrName_ = value;
        guidOrNameCase_ = value == null ? GuidOrNameOneofCase.None : GuidOrNameOneofCase.Anonymous;
      }
    }

    /// <summary>Field number for the "named" field.</summary>
    public const int NamedFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Name Named {
      get { return guidOrNameCase_ == GuidOrNameOneofCase.Named ? (global::Bitub.Dto.Name) guidOrName_ : null; }
      set {
        guidOrName_ = value;
        guidOrNameCase_ = value == null ? GuidOrNameOneofCase.None : GuidOrNameOneofCase.Named;
      }
    }

    private object guidOrName_;
    /// <summary>Enum of possible cases for the "guidOrName" oneof.</summary>
    public enum GuidOrNameOneofCase {
      None = 0,
      Anonymous = 1,
      Named = 2,
    }
    private GuidOrNameOneofCase guidOrNameCase_ = GuidOrNameOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GuidOrNameOneofCase GuidOrNameCase {
      get { return guidOrNameCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearGuidOrName() {
      guidOrNameCase_ = GuidOrNameOneofCase.None;
      guidOrName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Qualifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Qualifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Anonymous, other.Anonymous)) return false;
      if (!object.Equals(Named, other.Named)) return false;
      if (GuidOrNameCase != other.GuidOrNameCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (guidOrNameCase_ == GuidOrNameOneofCase.Anonymous) hash ^= Anonymous.GetHashCode();
      if (guidOrNameCase_ == GuidOrNameOneofCase.Named) hash ^= Named.GetHashCode();
      hash ^= (int) guidOrNameCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (guidOrNameCase_ == GuidOrNameOneofCase.Anonymous) {
        output.WriteRawTag(10);
        output.WriteMessage(Anonymous);
      }
      if (guidOrNameCase_ == GuidOrNameOneofCase.Named) {
        output.WriteRawTag(18);
        output.WriteMessage(Named);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (guidOrNameCase_ == GuidOrNameOneofCase.Anonymous) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Anonymous);
      }
      if (guidOrNameCase_ == GuidOrNameOneofCase.Named) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Named);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Qualifier other) {
      if (other == null) {
        return;
      }
      switch (other.GuidOrNameCase) {
        case GuidOrNameOneofCase.Anonymous:
          if (Anonymous == null) {
            Anonymous = new global::Bitub.Dto.GlobalUniqueId();
          }
          Anonymous.MergeFrom(other.Anonymous);
          break;
        case GuidOrNameOneofCase.Named:
          if (Named == null) {
            Named = new global::Bitub.Dto.Name();
          }
          Named.MergeFrom(other.Named);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Bitub.Dto.GlobalUniqueId subBuilder = new global::Bitub.Dto.GlobalUniqueId();
            if (guidOrNameCase_ == GuidOrNameOneofCase.Anonymous) {
              subBuilder.MergeFrom(Anonymous);
            }
            input.ReadMessage(subBuilder);
            Anonymous = subBuilder;
            break;
          }
          case 18: {
            global::Bitub.Dto.Name subBuilder = new global::Bitub.Dto.Name();
            if (guidOrNameCase_ == GuidOrNameOneofCase.Named) {
              subBuilder.MergeFrom(Named);
            }
            input.ReadMessage(subBuilder);
            Named = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Concept Uniform Resource Indentifier
  /// </summary>
  public sealed partial class Name : pb::IMessage<Name> {
    private static readonly pb::MessageParser<Name> _parser = new pb::MessageParser<Name>(() => new Name());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Name> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.CommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Name() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Name(Name other) : this() {
      frags_ = other.frags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Name Clone() {
      return new Name(this);
    }

    /// <summary>Field number for the "frags" field.</summary>
    public const int FragsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_frags_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> frags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Frags {
      get { return frags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Name);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Name other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!frags_.Equals(other.frags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= frags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      frags_.WriteTo(output, _repeated_frags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += frags_.CalculateSize(_repeated_frags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Name other) {
      if (other == null) {
        return;
      }
      frags_.Add(other.frags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            frags_.AddEntriesFrom(input, _repeated_frags_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A classifier as representative reference path
  /// </summary>
  public sealed partial class Classifier : pb::IMessage<Classifier> {
    private static readonly pb::MessageParser<Classifier> _parser = new pb::MessageParser<Classifier>(() => new Classifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Classifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.CommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Classifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Classifier(Classifier other) : this() {
      path_ = other.path_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Classifier Clone() {
      return new Classifier(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bitub.Dto.Qualifier> _repeated_path_codec
        = pb::FieldCodec.ForMessage(10, global::Bitub.Dto.Qualifier.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.Qualifier> path_ = new pbc::RepeatedField<global::Bitub.Dto.Qualifier>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.Qualifier> Path {
      get { return path_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Classifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Classifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!path_.Equals(other.path_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= path_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      path_.WriteTo(output, _repeated_path_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += path_.CalculateSize(_repeated_path_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Classifier other) {
      if (other == null) {
        return;
      }
      path_.Add(other.path_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A reference ID based on local or global identification
  /// </summary>
  public sealed partial class RefId : pb::IMessage<RefId> {
    private static readonly pb::MessageParser<RefId> _parser = new pb::MessageParser<RefId>(() => new RefId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RefId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.CommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefId(RefId other) : this() {
      switch (other.LocalOrGlobalCase) {
        case LocalOrGlobalOneofCase.Nid:
          Nid = other.Nid;
          break;
        case LocalOrGlobalOneofCase.Sid:
          Sid = other.Sid.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefId Clone() {
      return new RefId(this);
    }

    /// <summary>Field number for the "nid" field.</summary>
    public const int NidFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nid {
      get { return localOrGlobalCase_ == LocalOrGlobalOneofCase.Nid ? (int) localOrGlobal_ : 0; }
      set {
        localOrGlobal_ = value;
        localOrGlobalCase_ = LocalOrGlobalOneofCase.Nid;
      }
    }

    /// <summary>Field number for the "sid" field.</summary>
    public const int SidFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Qualifier Sid {
      get { return localOrGlobalCase_ == LocalOrGlobalOneofCase.Sid ? (global::Bitub.Dto.Qualifier) localOrGlobal_ : null; }
      set {
        localOrGlobal_ = value;
        localOrGlobalCase_ = value == null ? LocalOrGlobalOneofCase.None : LocalOrGlobalOneofCase.Sid;
      }
    }

    private object localOrGlobal_;
    /// <summary>Enum of possible cases for the "localOrGlobal" oneof.</summary>
    public enum LocalOrGlobalOneofCase {
      None = 0,
      Nid = 1,
      Sid = 2,
    }
    private LocalOrGlobalOneofCase localOrGlobalCase_ = LocalOrGlobalOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalOrGlobalOneofCase LocalOrGlobalCase {
      get { return localOrGlobalCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLocalOrGlobal() {
      localOrGlobalCase_ = LocalOrGlobalOneofCase.None;
      localOrGlobal_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RefId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RefId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nid != other.Nid) return false;
      if (!object.Equals(Sid, other.Sid)) return false;
      if (LocalOrGlobalCase != other.LocalOrGlobalCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (localOrGlobalCase_ == LocalOrGlobalOneofCase.Nid) hash ^= Nid.GetHashCode();
      if (localOrGlobalCase_ == LocalOrGlobalOneofCase.Sid) hash ^= Sid.GetHashCode();
      hash ^= (int) localOrGlobalCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (localOrGlobalCase_ == LocalOrGlobalOneofCase.Nid) {
        output.WriteRawTag(8);
        output.WriteInt32(Nid);
      }
      if (localOrGlobalCase_ == LocalOrGlobalOneofCase.Sid) {
        output.WriteRawTag(18);
        output.WriteMessage(Sid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (localOrGlobalCase_ == LocalOrGlobalOneofCase.Nid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nid);
      }
      if (localOrGlobalCase_ == LocalOrGlobalOneofCase.Sid) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RefId other) {
      if (other == null) {
        return;
      }
      switch (other.LocalOrGlobalCase) {
        case LocalOrGlobalOneofCase.Nid:
          Nid = other.Nid;
          break;
        case LocalOrGlobalOneofCase.Sid:
          if (Sid == null) {
            Sid = new global::Bitub.Dto.Qualifier();
          }
          Sid.MergeFrom(other.Sid);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Nid = input.ReadInt32();
            break;
          }
          case 18: {
            global::Bitub.Dto.Qualifier subBuilder = new global::Bitub.Dto.Qualifier();
            if (localOrGlobalCase_ == LocalOrGlobalOneofCase.Sid) {
              subBuilder.MergeFrom(Sid);
            }
            input.ReadMessage(subBuilder);
            Sid = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
