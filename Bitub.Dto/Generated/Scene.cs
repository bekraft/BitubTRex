// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Scene.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bitub.Dto.Scene {

  /// <summary>Holder for reflection information generated from Scene.proto</summary>
  public static partial class SceneReflection {

    #region Descriptor
    /// <summary>File descriptor for Scene.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SceneReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtTY2VuZS5wcm90bxIPQml0dWIuRHRvLlNjZW5lGgxDb21tb24ucHJvdG8a",
            "DkNsYXNzaWZ5LnByb3RvGg1TcGF0aWFsLnByb3RvGh9nb29nbGUvcHJvdG9i",
            "dWYvdGltZXN0YW1wLnByb3RvIooBCgRNZXNoEigKBHR5cGUYASABKA4yGi5C",
            "aXR1Yi5EdG8uU2NlbmUuRmFjZXRUeXBlEiwKBm9yaWVudBgCIAEoDjIcLkJp",
            "dHViLkR0by5TY2VuZS5PcmllbnRhdGlvbhIOCgZ2ZXJ0ZXgYAyADKA0SDgoG",
            "bm9ybWFsGAQgAygCEgoKAnV2GAUgAygCIoUBCgRGYWNlEiwKBm9yaWVudBgB",
            "IAEoDjIcLkJpdHViLkR0by5TY2VuZS5PcmllbnRhdGlvbhIMCgRsb29wGAIg",
            "AygNEgoKAnV2GAMgAygCEhAKCGlzUGxhbmFyGAQgASgIEiMKBG1lc2gYBSAB",
            "KAsyFS5CaXR1Yi5EdG8uU2NlbmUuTWVzaCIaCgJVVhIJCgF1GAEgASgCEgkK",
            "AXYYAiABKAIiJgoFUG9pbnQSDQoFbGFiZWwYASABKAkSDgoGdmVydGV4GAIg",
            "ASgNIjYKBVBhdGNoEg0KBWxhYmVsGAEgASgJEg4KBmlzTG9vcBgCIAEoCBIO",
            "CgZ2ZXJ0ZXgYAyADKA0iFgoHUHRBcnJheRILCgN4eXoYASADKAEitQEKCEZh",
            "Y2VCb2R5Eg0KBXB0U2V0GAEgASgNEiIKCG1hdGVyaWFsGAIgASgLMhAuQml0",
            "dWIuRHRvLlJlZklkEg8KB2lzU2hlbGwYAyABKAgSEAoIaXNDb252ZXgYBCAB",
            "KAgSLQoJdHJhbnNmb3JtGAogASgLMhouQml0dWIuRHRvLlNjZW5lLlRyYW5z",
            "Zm9ybRIkCgVmYWNlcxgLIAMoCzIVLkJpdHViLkR0by5TY2VuZS5GYWNlIsEB",
            "CghXaXJlQm9keRINCgVwdFNldBgBIAEoDRIiCghtYXRlcmlhbBgCIAEoCzIQ",
            "LkJpdHViLkR0by5SZWZJZBItCgl0cmFuc2Zvcm0YCiABKAsyGi5CaXR1Yi5E",
            "dG8uU2NlbmUuVHJhbnNmb3JtEicKB3BhdGNoZXMYCyADKAsyFi5CaXR1Yi5E",
            "dG8uU2NlbmUuUGF0Y2gSKgoKc2luZ2xldG9ucxgMIAMoCzIWLkJpdHViLkR0",
            "by5TY2VuZS5Qb2ludCI4CgpRdWF0ZXJuaW9uEgkKAXgYASABKAESCQoBeRgC",
            "IAEoARIJCgF6GAMgASgBEgkKAXcYBCABKAEidgoIUm90YXRpb24SIgoCcngY",
            "ASABKAsyFi5CaXR1Yi5EdG8uU3BhdGlhbC5YWVoSIgoCcnkYAiABKAsyFi5C",
            "aXR1Yi5EdG8uU3BhdGlhbC5YWVoSIgoCcnoYAyABKAsyFi5CaXR1Yi5EdG8u",
            "U3BhdGlhbC5YWVoimAEKCVRyYW5zZm9ybRImCgFyGAEgASgLMhkuQml0dWIu",
            "RHRvLlNjZW5lLlJvdGF0aW9uSAASKAoBcRgCIAEoCzIbLkJpdHViLkR0by5T",
            "Y2VuZS5RdWF0ZXJuaW9uSAASIQoBdBgDIAEoCzIWLkJpdHViLkR0by5TcGF0",
            "aWFsLlhZWkIWChRyb3RhdGlvbk9yUXVhdGVybmlvbiLVAQoOUmVwcmVzZW50",
            "YXRpb24SDwoHY29udGV4dBgBIAEoCRIzCgtib3VuZGluZ0JveBgDIAEoCzIe",
            "LkJpdHViLkR0by5TcGF0aWFsLkJvdW5kaW5nQm94EigKBnBvaW50cxgFIAMo",
            "CzIYLkJpdHViLkR0by5TY2VuZS5QdEFycmF5EikKBmJvZGllcxgGIAMoCzIZ",
            "LkJpdHViLkR0by5TY2VuZS5GYWNlQm9keRIoCgV3aXJlcxgHIAMoCzIZLkJp",
            "dHViLkR0by5TY2VuZS5XaXJlQm9keSKqAgoJQ29tcG9uZW50EiUKAmlkGAEg",
            "ASgLMhkuQml0dWIuRHRvLkdsb2JhbFVuaXF1ZUlkEikKBnBhcmVudBgCIAEo",
            "CzIZLkJpdHViLkR0by5HbG9iYWxVbmlxdWVJZBIMCgRuYW1lGAUgASgJEicK",
            "CGNvbmNlcHRzGAYgAygLMhUuQml0dWIuRHRvLkNsYXNzaWZpZXISKwoIY2hp",
            "bGRyZW4YByADKAsyGS5CaXR1Yi5EdG8uR2xvYmFsVW5pcXVlSWQSOAoPcmVw",
            "cmVzZW50YXRpb25zGAggAygLMh8uQml0dWIuRHRvLlNjZW5lLlJlcHJlc2Vu",
            "dGF0aW9uEi0KCGZlYXR1cmVzGAkgAygLMhsuQml0dWIuRHRvLkNsYXNzaWZ5",
            "LkZlYXR1cmUizgEKCE1hdGVyaWFsEhwKAmlkGAEgASgLMhAuQml0dWIuRHRv",
            "LlJlZklkEgwKBG5hbWUYAiABKAkSGwoTaGludFJlbmRlckJvdGhGYWNlcxgD",
            "IAEoCBIgChhoaW50U3dpdGNoRnJvbnRSZWFyRmFjZXMYBCABKAgSOQoNY29s",
            "b3JDaGFubmVscxgGIAMoCzIiLkJpdHViLkR0by5TY2VuZS5Db2xvck9yTm9y",
            "bWFsaXNlZBIcChRoaW50UmVmbGVjdGlvblNoYWRlchgJIAEoCSKSAQoRQ29s",
            "b3JPck5vcm1hbGlzZWQSLgoHY2hhbm5lbBgBIAEoDjIdLkJpdHViLkR0by5T",
            "Y2VuZS5Db2xvckNoYW5uZWwSJwoFY29sb3IYAiABKAsyFi5CaXR1Yi5EdG8u",
            "U2NlbmUuQ29sb3JIABIUCgpub3JtYWxpc2VkGAMgASgCSABCDgoMY29sb3JP",
            "clZhbHVlIjMKBUNvbG9yEgkKAVIYASABKAISCQoBRxgCIAEoAhIJCgFCGAMg",
            "ASgCEgkKAUEYBCABKAIitgEKDVNjZW5lTWV0YURhdGESJQoCaWQYASABKAsy",
            "GS5CaXR1Yi5EdG8uR2xvYmFsVW5pcXVlSWQSJQoHcHJvamVjdBgCIAEoCzIU",
            "LkJpdHViLkR0by5RdWFsaWZpZXISEwoLZGVzY3JpcHRpb24YAyABKAkSKAoF",
            "d2dzODQYBCABKAsyGS5CaXR1Yi5EdG8uU3BhdGlhbC5MYXRMb24SCwoDY3Jz",
            "GAUgASgJEgsKA2hycxgGIAEoCSKSAgoKU2NlbmVNb2RlbBIlCgJpZBgBIAEo",
            "CzIZLkJpdHViLkR0by5HbG9iYWxVbmlxdWVJZBIMCgRuYW1lGAIgASgJEhUK",
            "DXVuaXRzUGVyTWV0ZXIYAyABKAESKQoFc3RhbXAYBCABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuVGltZXN0YW1wEi8KCGNvbnRleHRzGAUgAygLMh0uQml0dWIu",
            "RHRvLlNjZW5lLlNjZW5lQ29udGV4dBIsCgltYXRlcmlhbHMYBiADKAsyGS5C",
            "aXR1Yi5EdG8uU2NlbmUuTWF0ZXJpYWwSLgoKY29tcG9uZW50cxgHIAMoCzIa",
            "LkJpdHViLkR0by5TY2VuZS5Db21wb25lbnQimgEKDFNjZW5lQ29udGV4dBIM",
            "CgRuYW1lGAEgASgJEhMKC2ZEZWZsZWN0aW9uGAIgASgBEhIKCmZUb2xlcmFu",
            "Y2UYAyABKAESJwoDd2NzGAUgASgLMhouQml0dWIuRHRvLlNjZW5lLlRyYW5z",
            "Zm9ybRIqCgdyZWdpb25zGAYgAygLMhkuQml0dWIuRHRvLlNwYXRpYWwuUmVn",
            "aW9uIs4CChFTY2VuZU1vZGVsUmVxdWVzdBIcCgJpZBgBIAEoCzIQLkJpdHVi",
            "LkR0by5SZWZJZBIjCgVzY2VuZRgCIAEoCzIULkJpdHViLkR0by5RdWFsaWZp",
            "ZXISNQoNc2NlbmVEYXRhVHlwZRgDIAEoDjIeLkJpdHViLkR0by5TY2VuZS5T",
            "Y2VuZURhdGFUeXBlEjEKCXZpZXdwb2ludBgEIAEoCzIcLkJpdHViLkR0by5T",
            "cGF0aWFsLlZpZXdwb2ludEgAEicKBGFib3gYBSABKAsyFy5CaXR1Yi5EdG8u",
            "U3BhdGlhbC5BQm94SAASKgoMcmVxdWVzdFRva2VuGAYgASgLMhQuQml0dWIu",
            "RHRvLlF1YWxpZmllchIkCgZmaWx0ZXIYByADKAsyFC5CaXR1Yi5EdG8uUXVh",
            "bGlmaWVyQhEKD3ZpZXdwb2ludE9yQUJveCorCgtPcmllbnRhdGlvbhILCgdV",
            "TktOT1dOEAASBwoDQ0NXEAESBgoCQ1cQAipUCglGYWNldFR5cGUSDQoJVU5E",
            "RUZJTkVEEAASDAoIVFJJX01FU0gQARIOCgpUUklfU1RSSVBFEAISCwoHVFJJ",
            "X0ZBThADEg0KCVFVQURfTUVTSBAEKmgKDENvbG9yQ2hhbm5lbBIKCgZBbGJl",
            "ZG8QABILCgdEaWZmdXNlEAESDgoKUmVmbGVjdGl2ZRACEgwKCFNwZWN1bGFy",
            "EAMSDAoIRW1taXNpdmUQBBITCg9EaWZmdXNlRW1taXNpdmUQBSqVAQoNU2Nl",
            "bmVEYXRhVHlwZRIMCghNRVRBREFUQRAAEg0KCUNPTVBPTkVOVBABEgwKCE1B",
            "VEVSSUFMEAISEgoOQ0xBU1NJRklDQVRJT04QBBIMCghGRUFUVVJFUxAIEhoK",
            "FkNPTVBPTkVOVF9BTkRfTUFURVJJQUwQAxISCg5GVUxMX0NPTVBPTkVOVBAH",
            "EgcKA0FMTBAPQiMKD2JpdHViLmR0by5zY2VuZaoCD0JpdHViLkR0by5TY2Vu",
            "ZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bitub.Dto.CommonReflection.Descriptor, global::Bitub.Dto.Classify.ClassifyReflection.Descriptor, global::Bitub.Dto.Spatial.SpatialReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Bitub.Dto.Scene.Orientation), typeof(global::Bitub.Dto.Scene.FacetType), typeof(global::Bitub.Dto.Scene.ColorChannel), typeof(global::Bitub.Dto.Scene.SceneDataType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.Mesh), global::Bitub.Dto.Scene.Mesh.Parser, new[]{ "Type", "Orient", "Vertex", "Normal", "Uv" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.Face), global::Bitub.Dto.Scene.Face.Parser, new[]{ "Orient", "Loop", "Uv", "IsPlanar", "Mesh" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.UV), global::Bitub.Dto.Scene.UV.Parser, new[]{ "U", "V" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.Point), global::Bitub.Dto.Scene.Point.Parser, new[]{ "Label", "Vertex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.Patch), global::Bitub.Dto.Scene.Patch.Parser, new[]{ "Label", "IsLoop", "Vertex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.PtArray), global::Bitub.Dto.Scene.PtArray.Parser, new[]{ "Xyz" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.FaceBody), global::Bitub.Dto.Scene.FaceBody.Parser, new[]{ "PtSet", "Material", "IsShell", "IsConvex", "Transform", "Faces" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.WireBody), global::Bitub.Dto.Scene.WireBody.Parser, new[]{ "PtSet", "Material", "Transform", "Patches", "Singletons" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.Quaternion), global::Bitub.Dto.Scene.Quaternion.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.Rotation), global::Bitub.Dto.Scene.Rotation.Parser, new[]{ "Rx", "Ry", "Rz" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.Transform), global::Bitub.Dto.Scene.Transform.Parser, new[]{ "R", "Q", "T" }, new[]{ "RotationOrQuaternion" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.Representation), global::Bitub.Dto.Scene.Representation.Parser, new[]{ "Context", "BoundingBox", "Points", "Bodies", "Wires" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.Component), global::Bitub.Dto.Scene.Component.Parser, new[]{ "Id", "Parent", "Name", "Concepts", "Children", "Representations", "Features" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.Material), global::Bitub.Dto.Scene.Material.Parser, new[]{ "Id", "Name", "HintRenderBothFaces", "HintSwitchFrontRearFaces", "ColorChannels", "HintReflectionShader" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.ColorOrNormalised), global::Bitub.Dto.Scene.ColorOrNormalised.Parser, new[]{ "Channel", "Color", "Normalised" }, new[]{ "ColorOrValue" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.Color), global::Bitub.Dto.Scene.Color.Parser, new[]{ "R", "G", "B", "A" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.SceneMetaData), global::Bitub.Dto.Scene.SceneMetaData.Parser, new[]{ "Id", "Project", "Description", "Wgs84", "Crs", "Hrs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.SceneModel), global::Bitub.Dto.Scene.SceneModel.Parser, new[]{ "Id", "Name", "UnitsPerMeter", "Stamp", "Contexts", "Materials", "Components" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.SceneContext), global::Bitub.Dto.Scene.SceneContext.Parser, new[]{ "Name", "FDeflection", "FTolerance", "Wcs", "Regions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.Scene.SceneModelRequest), global::Bitub.Dto.Scene.SceneModelRequest.Parser, new[]{ "Id", "Scene", "SceneDataType", "Viewpoint", "Abox", "RequestToken", "Filter" }, new[]{ "ViewpointOrABox" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Orientation either CCW or CW
  /// </summary>
  public enum Orientation {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("CCW")] Ccw = 1,
    [pbr::OriginalName("CW")] Cw = 2,
  }

  /// <summary>
  /// Facet Type
  /// </summary>
  public enum FacetType {
    [pbr::OriginalName("UNDEFINED")] Undefined = 0,
    [pbr::OriginalName("TRI_MESH")] TriMesh = 1,
    [pbr::OriginalName("TRI_STRIPE")] TriStripe = 2,
    [pbr::OriginalName("TRI_FAN")] TriFan = 3,
    [pbr::OriginalName("QUAD_MESH")] QuadMesh = 4,
  }

  /// <summary>
  /// Color channel
  /// </summary>
  public enum ColorChannel {
    [pbr::OriginalName("Albedo")] Albedo = 0,
    [pbr::OriginalName("Diffuse")] Diffuse = 1,
    [pbr::OriginalName("Reflective")] Reflective = 2,
    [pbr::OriginalName("Specular")] Specular = 3,
    [pbr::OriginalName("Emmisive")] Emmisive = 4,
    [pbr::OriginalName("DiffuseEmmisive")] DiffuseEmmisive = 5,
  }

  /// <summary>
  /// Scene request data type
  /// </summary>
  public enum SceneDataType {
    [pbr::OriginalName("METADATA")] Metadata = 0,
    [pbr::OriginalName("COMPONENT")] Component = 1,
    [pbr::OriginalName("MATERIAL")] Material = 2,
    [pbr::OriginalName("CLASSIFICATION")] Classification = 4,
    [pbr::OriginalName("FEATURES")] Features = 8,
    [pbr::OriginalName("COMPONENT_AND_MATERIAL")] ComponentAndMaterial = 3,
    [pbr::OriginalName("FULL_COMPONENT")] FullComponent = 7,
    [pbr::OriginalName("ALL")] All = 15,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Generic mesh
  /// </summary>
  public sealed partial class Mesh : pb::IMessage<Mesh> {
    private static readonly pb::MessageParser<Mesh> _parser = new pb::MessageParser<Mesh>(() => new Mesh());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mesh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh(Mesh other) : this() {
      type_ = other.type_;
      orient_ = other.orient_;
      vertex_ = other.vertex_.Clone();
      normal_ = other.normal_.Clone();
      uv_ = other.uv_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh Clone() {
      return new Mesh(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Bitub.Dto.Scene.FacetType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Scene.FacetType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "orient" field.</summary>
    public const int OrientFieldNumber = 2;
    private global::Bitub.Dto.Scene.Orientation orient_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Scene.Orientation Orient {
      get { return orient_; }
      set {
        orient_ = value;
      }
    }

    /// <summary>Field number for the "vertex" field.</summary>
    public const int VertexFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_vertex_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> vertex_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Vertex {
      get { return vertex_; }
    }

    /// <summary>Field number for the "normal" field.</summary>
    public const int NormalFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_normal_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> normal_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Normal {
      get { return normal_; }
    }

    /// <summary>Field number for the "uv" field.</summary>
    public const int UvFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_uv_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> uv_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Uv {
      get { return uv_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mesh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mesh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Orient != other.Orient) return false;
      if(!vertex_.Equals(other.vertex_)) return false;
      if(!normal_.Equals(other.normal_)) return false;
      if(!uv_.Equals(other.uv_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Orient != 0) hash ^= Orient.GetHashCode();
      hash ^= vertex_.GetHashCode();
      hash ^= normal_.GetHashCode();
      hash ^= uv_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Orient != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Orient);
      }
      vertex_.WriteTo(output, _repeated_vertex_codec);
      normal_.WriteTo(output, _repeated_normal_codec);
      uv_.WriteTo(output, _repeated_uv_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Orient != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Orient);
      }
      size += vertex_.CalculateSize(_repeated_vertex_codec);
      size += normal_.CalculateSize(_repeated_normal_codec);
      size += uv_.CalculateSize(_repeated_uv_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mesh other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Orient != 0) {
        Orient = other.Orient;
      }
      vertex_.Add(other.vertex_);
      normal_.Add(other.normal_);
      uv_.Add(other.uv_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Bitub.Dto.Scene.FacetType) input.ReadEnum();
            break;
          }
          case 16: {
            Orient = (global::Bitub.Dto.Scene.Orientation) input.ReadEnum();
            break;
          }
          case 26:
          case 24: {
            vertex_.AddEntriesFrom(input, _repeated_vertex_codec);
            break;
          }
          case 34:
          case 37: {
            normal_.AddEntriesFrom(input, _repeated_normal_codec);
            break;
          }
          case 42:
          case 45: {
            uv_.AddEntriesFrom(input, _repeated_uv_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A generic meshed face
  /// </summary>
  public sealed partial class Face : pb::IMessage<Face> {
    private static readonly pb::MessageParser<Face> _parser = new pb::MessageParser<Face>(() => new Face());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Face> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Face() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Face(Face other) : this() {
      orient_ = other.orient_;
      loop_ = other.loop_.Clone();
      uv_ = other.uv_.Clone();
      isPlanar_ = other.isPlanar_;
      mesh_ = other.mesh_ != null ? other.mesh_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Face Clone() {
      return new Face(this);
    }

    /// <summary>Field number for the "orient" field.</summary>
    public const int OrientFieldNumber = 1;
    private global::Bitub.Dto.Scene.Orientation orient_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Scene.Orientation Orient {
      get { return orient_; }
      set {
        orient_ = value;
      }
    }

    /// <summary>Field number for the "loop" field.</summary>
    public const int LoopFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_loop_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> loop_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Loop {
      get { return loop_; }
    }

    /// <summary>Field number for the "uv" field.</summary>
    public const int UvFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_uv_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> uv_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Uv {
      get { return uv_; }
    }

    /// <summary>Field number for the "isPlanar" field.</summary>
    public const int IsPlanarFieldNumber = 4;
    private bool isPlanar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlanar {
      get { return isPlanar_; }
      set {
        isPlanar_ = value;
      }
    }

    /// <summary>Field number for the "mesh" field.</summary>
    public const int MeshFieldNumber = 5;
    private global::Bitub.Dto.Scene.Mesh mesh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Scene.Mesh Mesh {
      get { return mesh_; }
      set {
        mesh_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Face);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Face other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Orient != other.Orient) return false;
      if(!loop_.Equals(other.loop_)) return false;
      if(!uv_.Equals(other.uv_)) return false;
      if (IsPlanar != other.IsPlanar) return false;
      if (!object.Equals(Mesh, other.Mesh)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Orient != 0) hash ^= Orient.GetHashCode();
      hash ^= loop_.GetHashCode();
      hash ^= uv_.GetHashCode();
      if (IsPlanar != false) hash ^= IsPlanar.GetHashCode();
      if (mesh_ != null) hash ^= Mesh.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Orient != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Orient);
      }
      loop_.WriteTo(output, _repeated_loop_codec);
      uv_.WriteTo(output, _repeated_uv_codec);
      if (IsPlanar != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsPlanar);
      }
      if (mesh_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Mesh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Orient != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Orient);
      }
      size += loop_.CalculateSize(_repeated_loop_codec);
      size += uv_.CalculateSize(_repeated_uv_codec);
      if (IsPlanar != false) {
        size += 1 + 1;
      }
      if (mesh_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mesh);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Face other) {
      if (other == null) {
        return;
      }
      if (other.Orient != 0) {
        Orient = other.Orient;
      }
      loop_.Add(other.loop_);
      uv_.Add(other.uv_);
      if (other.IsPlanar != false) {
        IsPlanar = other.IsPlanar;
      }
      if (other.mesh_ != null) {
        if (mesh_ == null) {
          Mesh = new global::Bitub.Dto.Scene.Mesh();
        }
        Mesh.MergeFrom(other.Mesh);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Orient = (global::Bitub.Dto.Scene.Orientation) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            loop_.AddEntriesFrom(input, _repeated_loop_codec);
            break;
          }
          case 26:
          case 29: {
            uv_.AddEntriesFrom(input, _repeated_uv_codec);
            break;
          }
          case 32: {
            IsPlanar = input.ReadBool();
            break;
          }
          case 42: {
            if (mesh_ == null) {
              Mesh = new global::Bitub.Dto.Scene.Mesh();
            }
            input.ReadMessage(Mesh);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// UV concept
  /// </summary>
  public sealed partial class UV : pb::IMessage<UV> {
    private static readonly pb::MessageParser<UV> _parser = new pb::MessageParser<UV>(() => new UV());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UV> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UV() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UV(UV other) : this() {
      u_ = other.u_;
      v_ = other.v_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UV Clone() {
      return new UV(this);
    }

    /// <summary>Field number for the "u" field.</summary>
    public const int UFieldNumber = 1;
    private float u_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float U {
      get { return u_; }
      set {
        u_ = value;
      }
    }

    /// <summary>Field number for the "v" field.</summary>
    public const int VFieldNumber = 2;
    private float v_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UV);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UV other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(U, other.U)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(V, other.V)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (U != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(U);
      if (V != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(V);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (U != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(U);
      }
      if (V != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(V);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (U != 0F) {
        size += 1 + 4;
      }
      if (V != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UV other) {
      if (other == null) {
        return;
      }
      if (other.U != 0F) {
        U = other.U;
      }
      if (other.V != 0F) {
        V = other.V;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            U = input.ReadFloat();
            break;
          }
          case 21: {
            V = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Labeled point of a Wire
  /// </summary>
  public sealed partial class Point : pb::IMessage<Point> {
    private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Point> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point(Point other) : this() {
      label_ = other.label_;
      vertex_ = other.vertex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point Clone() {
      return new Point(this);
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 1;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vertex" field.</summary>
    public const int VertexFieldNumber = 2;
    private uint vertex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Vertex {
      get { return vertex_; }
      set {
        vertex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Point);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Point other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Label != other.Label) return false;
      if (Vertex != other.Vertex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Vertex != 0) hash ^= Vertex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Label.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Label);
      }
      if (Vertex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Vertex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Vertex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Vertex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Point other) {
      if (other == null) {
        return;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Vertex != 0) {
        Vertex = other.Vertex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Label = input.ReadString();
            break;
          }
          case 16: {
            Vertex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Labeled path of a Wire
  /// </summary>
  public sealed partial class Patch : pb::IMessage<Patch> {
    private static readonly pb::MessageParser<Patch> _parser = new pb::MessageParser<Patch>(() => new Patch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Patch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Patch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Patch(Patch other) : this() {
      label_ = other.label_;
      isLoop_ = other.isLoop_;
      vertex_ = other.vertex_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Patch Clone() {
      return new Patch(this);
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 1;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isLoop" field.</summary>
    public const int IsLoopFieldNumber = 2;
    private bool isLoop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLoop {
      get { return isLoop_; }
      set {
        isLoop_ = value;
      }
    }

    /// <summary>Field number for the "vertex" field.</summary>
    public const int VertexFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_vertex_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> vertex_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Vertex {
      get { return vertex_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Patch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Patch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Label != other.Label) return false;
      if (IsLoop != other.IsLoop) return false;
      if(!vertex_.Equals(other.vertex_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (IsLoop != false) hash ^= IsLoop.GetHashCode();
      hash ^= vertex_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Label.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Label);
      }
      if (IsLoop != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsLoop);
      }
      vertex_.WriteTo(output, _repeated_vertex_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (IsLoop != false) {
        size += 1 + 1;
      }
      size += vertex_.CalculateSize(_repeated_vertex_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Patch other) {
      if (other == null) {
        return;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.IsLoop != false) {
        IsLoop = other.IsLoop;
      }
      vertex_.Add(other.vertex_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Label = input.ReadString();
            break;
          }
          case 16: {
            IsLoop = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            vertex_.AddEntriesFrom(input, _repeated_vertex_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// XYZ Container
  /// </summary>
  public sealed partial class PtArray : pb::IMessage<PtArray> {
    private static readonly pb::MessageParser<PtArray> _parser = new pb::MessageParser<PtArray>(() => new PtArray());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PtArray> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PtArray() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PtArray(PtArray other) : this() {
      xyz_ = other.xyz_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PtArray Clone() {
      return new PtArray(this);
    }

    /// <summary>Field number for the "xyz" field.</summary>
    public const int XyzFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_xyz_codec
        = pb::FieldCodec.ForDouble(10);
    private readonly pbc::RepeatedField<double> xyz_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Xyz {
      get { return xyz_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PtArray);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PtArray other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!xyz_.Equals(other.xyz_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= xyz_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      xyz_.WriteTo(output, _repeated_xyz_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += xyz_.CalculateSize(_repeated_xyz_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PtArray other) {
      if (other == null) {
        return;
      }
      xyz_.Add(other.xyz_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            xyz_.AddEntriesFrom(input, _repeated_xyz_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A BREP body face container
  /// </summary>
  public sealed partial class FaceBody : pb::IMessage<FaceBody> {
    private static readonly pb::MessageParser<FaceBody> _parser = new pb::MessageParser<FaceBody>(() => new FaceBody());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FaceBody> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceBody() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceBody(FaceBody other) : this() {
      ptSet_ = other.ptSet_;
      material_ = other.material_ != null ? other.material_.Clone() : null;
      isShell_ = other.isShell_;
      isConvex_ = other.isConvex_;
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      faces_ = other.faces_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceBody Clone() {
      return new FaceBody(this);
    }

    /// <summary>Field number for the "ptSet" field.</summary>
    public const int PtSetFieldNumber = 1;
    private uint ptSet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PtSet {
      get { return ptSet_; }
      set {
        ptSet_ = value;
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 2;
    private global::Bitub.Dto.RefId material_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.RefId Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "isShell" field.</summary>
    public const int IsShellFieldNumber = 3;
    private bool isShell_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsShell {
      get { return isShell_; }
      set {
        isShell_ = value;
      }
    }

    /// <summary>Field number for the "isConvex" field.</summary>
    public const int IsConvexFieldNumber = 4;
    private bool isConvex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsConvex {
      get { return isConvex_; }
      set {
        isConvex_ = value;
      }
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 10;
    private global::Bitub.Dto.Scene.Transform transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Scene.Transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    /// <summary>Field number for the "faces" field.</summary>
    public const int FacesFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Bitub.Dto.Scene.Face> _repeated_faces_codec
        = pb::FieldCodec.ForMessage(90, global::Bitub.Dto.Scene.Face.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.Scene.Face> faces_ = new pbc::RepeatedField<global::Bitub.Dto.Scene.Face>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.Scene.Face> Faces {
      get { return faces_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FaceBody);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FaceBody other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PtSet != other.PtSet) return false;
      if (!object.Equals(Material, other.Material)) return false;
      if (IsShell != other.IsShell) return false;
      if (IsConvex != other.IsConvex) return false;
      if (!object.Equals(Transform, other.Transform)) return false;
      if(!faces_.Equals(other.faces_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PtSet != 0) hash ^= PtSet.GetHashCode();
      if (material_ != null) hash ^= Material.GetHashCode();
      if (IsShell != false) hash ^= IsShell.GetHashCode();
      if (IsConvex != false) hash ^= IsConvex.GetHashCode();
      if (transform_ != null) hash ^= Transform.GetHashCode();
      hash ^= faces_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PtSet != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PtSet);
      }
      if (material_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Material);
      }
      if (IsShell != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsShell);
      }
      if (IsConvex != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsConvex);
      }
      if (transform_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Transform);
      }
      faces_.WriteTo(output, _repeated_faces_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PtSet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PtSet);
      }
      if (material_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Material);
      }
      if (IsShell != false) {
        size += 1 + 1;
      }
      if (IsConvex != false) {
        size += 1 + 1;
      }
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      size += faces_.CalculateSize(_repeated_faces_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FaceBody other) {
      if (other == null) {
        return;
      }
      if (other.PtSet != 0) {
        PtSet = other.PtSet;
      }
      if (other.material_ != null) {
        if (material_ == null) {
          Material = new global::Bitub.Dto.RefId();
        }
        Material.MergeFrom(other.Material);
      }
      if (other.IsShell != false) {
        IsShell = other.IsShell;
      }
      if (other.IsConvex != false) {
        IsConvex = other.IsConvex;
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          Transform = new global::Bitub.Dto.Scene.Transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      faces_.Add(other.faces_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PtSet = input.ReadUInt32();
            break;
          }
          case 18: {
            if (material_ == null) {
              Material = new global::Bitub.Dto.RefId();
            }
            input.ReadMessage(Material);
            break;
          }
          case 24: {
            IsShell = input.ReadBool();
            break;
          }
          case 32: {
            IsConvex = input.ReadBool();
            break;
          }
          case 82: {
            if (transform_ == null) {
              Transform = new global::Bitub.Dto.Scene.Transform();
            }
            input.ReadMessage(Transform);
            break;
          }
          case 90: {
            faces_.AddEntriesFrom(input, _repeated_faces_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A wired body container
  /// </summary>
  public sealed partial class WireBody : pb::IMessage<WireBody> {
    private static readonly pb::MessageParser<WireBody> _parser = new pb::MessageParser<WireBody>(() => new WireBody());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WireBody> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WireBody() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WireBody(WireBody other) : this() {
      ptSet_ = other.ptSet_;
      material_ = other.material_ != null ? other.material_.Clone() : null;
      transform_ = other.transform_ != null ? other.transform_.Clone() : null;
      patches_ = other.patches_.Clone();
      singletons_ = other.singletons_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WireBody Clone() {
      return new WireBody(this);
    }

    /// <summary>Field number for the "ptSet" field.</summary>
    public const int PtSetFieldNumber = 1;
    private uint ptSet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PtSet {
      get { return ptSet_; }
      set {
        ptSet_ = value;
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 2;
    private global::Bitub.Dto.RefId material_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.RefId Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "transform" field.</summary>
    public const int TransformFieldNumber = 10;
    private global::Bitub.Dto.Scene.Transform transform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Scene.Transform Transform {
      get { return transform_; }
      set {
        transform_ = value;
      }
    }

    /// <summary>Field number for the "patches" field.</summary>
    public const int PatchesFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Bitub.Dto.Scene.Patch> _repeated_patches_codec
        = pb::FieldCodec.ForMessage(90, global::Bitub.Dto.Scene.Patch.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.Scene.Patch> patches_ = new pbc::RepeatedField<global::Bitub.Dto.Scene.Patch>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.Scene.Patch> Patches {
      get { return patches_; }
    }

    /// <summary>Field number for the "singletons" field.</summary>
    public const int SingletonsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Bitub.Dto.Scene.Point> _repeated_singletons_codec
        = pb::FieldCodec.ForMessage(98, global::Bitub.Dto.Scene.Point.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.Scene.Point> singletons_ = new pbc::RepeatedField<global::Bitub.Dto.Scene.Point>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.Scene.Point> Singletons {
      get { return singletons_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WireBody);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WireBody other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PtSet != other.PtSet) return false;
      if (!object.Equals(Material, other.Material)) return false;
      if (!object.Equals(Transform, other.Transform)) return false;
      if(!patches_.Equals(other.patches_)) return false;
      if(!singletons_.Equals(other.singletons_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PtSet != 0) hash ^= PtSet.GetHashCode();
      if (material_ != null) hash ^= Material.GetHashCode();
      if (transform_ != null) hash ^= Transform.GetHashCode();
      hash ^= patches_.GetHashCode();
      hash ^= singletons_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PtSet != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PtSet);
      }
      if (material_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Material);
      }
      if (transform_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Transform);
      }
      patches_.WriteTo(output, _repeated_patches_codec);
      singletons_.WriteTo(output, _repeated_singletons_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PtSet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PtSet);
      }
      if (material_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Material);
      }
      if (transform_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transform);
      }
      size += patches_.CalculateSize(_repeated_patches_codec);
      size += singletons_.CalculateSize(_repeated_singletons_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WireBody other) {
      if (other == null) {
        return;
      }
      if (other.PtSet != 0) {
        PtSet = other.PtSet;
      }
      if (other.material_ != null) {
        if (material_ == null) {
          Material = new global::Bitub.Dto.RefId();
        }
        Material.MergeFrom(other.Material);
      }
      if (other.transform_ != null) {
        if (transform_ == null) {
          Transform = new global::Bitub.Dto.Scene.Transform();
        }
        Transform.MergeFrom(other.Transform);
      }
      patches_.Add(other.patches_);
      singletons_.Add(other.singletons_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PtSet = input.ReadUInt32();
            break;
          }
          case 18: {
            if (material_ == null) {
              Material = new global::Bitub.Dto.RefId();
            }
            input.ReadMessage(Material);
            break;
          }
          case 82: {
            if (transform_ == null) {
              Transform = new global::Bitub.Dto.Scene.Transform();
            }
            input.ReadMessage(Transform);
            break;
          }
          case 90: {
            patches_.AddEntriesFrom(input, _repeated_patches_codec);
            break;
          }
          case 98: {
            singletons_.AddEntriesFrom(input, _repeated_singletons_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Quaternion : pb::IMessage<Quaternion> {
    private static readonly pb::MessageParser<Quaternion> _parser = new pb::MessageParser<Quaternion>(() => new Quaternion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quaternion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion(Quaternion other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion Clone() {
      return new Quaternion(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private double w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quaternion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quaternion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Z, other.Z)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(W, other.W)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
      if (Y != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
      if (Z != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Z);
      if (W != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(W);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (W != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      if (W != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quaternion other) {
      if (other == null) {
        return;
      }
      if (other.X != 0D) {
        X = other.X;
      }
      if (other.Y != 0D) {
        Y = other.Y;
      }
      if (other.Z != 0D) {
        Z = other.Z;
      }
      if (other.W != 0D) {
        W = other.W;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
          case 33: {
            W = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Rotation : pb::IMessage<Rotation> {
    private static readonly pb::MessageParser<Rotation> _parser = new pb::MessageParser<Rotation>(() => new Rotation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rotation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rotation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rotation(Rotation other) : this() {
      rx_ = other.rx_ != null ? other.rx_.Clone() : null;
      ry_ = other.ry_ != null ? other.ry_.Clone() : null;
      rz_ = other.rz_ != null ? other.rz_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rotation Clone() {
      return new Rotation(this);
    }

    /// <summary>Field number for the "rx" field.</summary>
    public const int RxFieldNumber = 1;
    private global::Bitub.Dto.Spatial.XYZ rx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Spatial.XYZ Rx {
      get { return rx_; }
      set {
        rx_ = value;
      }
    }

    /// <summary>Field number for the "ry" field.</summary>
    public const int RyFieldNumber = 2;
    private global::Bitub.Dto.Spatial.XYZ ry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Spatial.XYZ Ry {
      get { return ry_; }
      set {
        ry_ = value;
      }
    }

    /// <summary>Field number for the "rz" field.</summary>
    public const int RzFieldNumber = 3;
    private global::Bitub.Dto.Spatial.XYZ rz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Spatial.XYZ Rz {
      get { return rz_; }
      set {
        rz_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rotation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rotation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Rx, other.Rx)) return false;
      if (!object.Equals(Ry, other.Ry)) return false;
      if (!object.Equals(Rz, other.Rz)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rx_ != null) hash ^= Rx.GetHashCode();
      if (ry_ != null) hash ^= Ry.GetHashCode();
      if (rz_ != null) hash ^= Rz.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rx_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rx);
      }
      if (ry_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ry);
      }
      if (rz_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rx_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rx);
      }
      if (ry_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ry);
      }
      if (rz_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rz);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rotation other) {
      if (other == null) {
        return;
      }
      if (other.rx_ != null) {
        if (rx_ == null) {
          Rx = new global::Bitub.Dto.Spatial.XYZ();
        }
        Rx.MergeFrom(other.Rx);
      }
      if (other.ry_ != null) {
        if (ry_ == null) {
          Ry = new global::Bitub.Dto.Spatial.XYZ();
        }
        Ry.MergeFrom(other.Ry);
      }
      if (other.rz_ != null) {
        if (rz_ == null) {
          Rz = new global::Bitub.Dto.Spatial.XYZ();
        }
        Rz.MergeFrom(other.Rz);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rx_ == null) {
              Rx = new global::Bitub.Dto.Spatial.XYZ();
            }
            input.ReadMessage(Rx);
            break;
          }
          case 18: {
            if (ry_ == null) {
              Ry = new global::Bitub.Dto.Spatial.XYZ();
            }
            input.ReadMessage(Ry);
            break;
          }
          case 26: {
            if (rz_ == null) {
              Rz = new global::Bitub.Dto.Spatial.XYZ();
            }
            input.ReadMessage(Rz);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A transform is either a rotation matrix or a quaternion description
  /// </summary>
  public sealed partial class Transform : pb::IMessage<Transform> {
    private static readonly pb::MessageParser<Transform> _parser = new pb::MessageParser<Transform>(() => new Transform());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transform> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform(Transform other) : this() {
      t_ = other.t_ != null ? other.t_.Clone() : null;
      switch (other.RotationOrQuaternionCase) {
        case RotationOrQuaternionOneofCase.R:
          R = other.R.Clone();
          break;
        case RotationOrQuaternionOneofCase.Q:
          Q = other.Q.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transform Clone() {
      return new Transform(this);
    }

    /// <summary>Field number for the "r" field.</summary>
    public const int RFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Scene.Rotation R {
      get { return rotationOrQuaternionCase_ == RotationOrQuaternionOneofCase.R ? (global::Bitub.Dto.Scene.Rotation) rotationOrQuaternion_ : null; }
      set {
        rotationOrQuaternion_ = value;
        rotationOrQuaternionCase_ = value == null ? RotationOrQuaternionOneofCase.None : RotationOrQuaternionOneofCase.R;
      }
    }

    /// <summary>Field number for the "q" field.</summary>
    public const int QFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Scene.Quaternion Q {
      get { return rotationOrQuaternionCase_ == RotationOrQuaternionOneofCase.Q ? (global::Bitub.Dto.Scene.Quaternion) rotationOrQuaternion_ : null; }
      set {
        rotationOrQuaternion_ = value;
        rotationOrQuaternionCase_ = value == null ? RotationOrQuaternionOneofCase.None : RotationOrQuaternionOneofCase.Q;
      }
    }

    /// <summary>Field number for the "t" field.</summary>
    public const int TFieldNumber = 3;
    private global::Bitub.Dto.Spatial.XYZ t_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Spatial.XYZ T {
      get { return t_; }
      set {
        t_ = value;
      }
    }

    private object rotationOrQuaternion_;
    /// <summary>Enum of possible cases for the "rotationOrQuaternion" oneof.</summary>
    public enum RotationOrQuaternionOneofCase {
      None = 0,
      R = 1,
      Q = 2,
    }
    private RotationOrQuaternionOneofCase rotationOrQuaternionCase_ = RotationOrQuaternionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RotationOrQuaternionOneofCase RotationOrQuaternionCase {
      get { return rotationOrQuaternionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRotationOrQuaternion() {
      rotationOrQuaternionCase_ = RotationOrQuaternionOneofCase.None;
      rotationOrQuaternion_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transform);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transform other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(R, other.R)) return false;
      if (!object.Equals(Q, other.Q)) return false;
      if (!object.Equals(T, other.T)) return false;
      if (RotationOrQuaternionCase != other.RotationOrQuaternionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rotationOrQuaternionCase_ == RotationOrQuaternionOneofCase.R) hash ^= R.GetHashCode();
      if (rotationOrQuaternionCase_ == RotationOrQuaternionOneofCase.Q) hash ^= Q.GetHashCode();
      if (t_ != null) hash ^= T.GetHashCode();
      hash ^= (int) rotationOrQuaternionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rotationOrQuaternionCase_ == RotationOrQuaternionOneofCase.R) {
        output.WriteRawTag(10);
        output.WriteMessage(R);
      }
      if (rotationOrQuaternionCase_ == RotationOrQuaternionOneofCase.Q) {
        output.WriteRawTag(18);
        output.WriteMessage(Q);
      }
      if (t_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(T);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rotationOrQuaternionCase_ == RotationOrQuaternionOneofCase.R) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(R);
      }
      if (rotationOrQuaternionCase_ == RotationOrQuaternionOneofCase.Q) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Q);
      }
      if (t_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(T);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transform other) {
      if (other == null) {
        return;
      }
      if (other.t_ != null) {
        if (t_ == null) {
          T = new global::Bitub.Dto.Spatial.XYZ();
        }
        T.MergeFrom(other.T);
      }
      switch (other.RotationOrQuaternionCase) {
        case RotationOrQuaternionOneofCase.R:
          if (R == null) {
            R = new global::Bitub.Dto.Scene.Rotation();
          }
          R.MergeFrom(other.R);
          break;
        case RotationOrQuaternionOneofCase.Q:
          if (Q == null) {
            Q = new global::Bitub.Dto.Scene.Quaternion();
          }
          Q.MergeFrom(other.Q);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Bitub.Dto.Scene.Rotation subBuilder = new global::Bitub.Dto.Scene.Rotation();
            if (rotationOrQuaternionCase_ == RotationOrQuaternionOneofCase.R) {
              subBuilder.MergeFrom(R);
            }
            input.ReadMessage(subBuilder);
            R = subBuilder;
            break;
          }
          case 18: {
            global::Bitub.Dto.Scene.Quaternion subBuilder = new global::Bitub.Dto.Scene.Quaternion();
            if (rotationOrQuaternionCase_ == RotationOrQuaternionOneofCase.Q) {
              subBuilder.MergeFrom(Q);
            }
            input.ReadMessage(subBuilder);
            Q = subBuilder;
            break;
          }
          case 26: {
            if (t_ == null) {
              T = new global::Bitub.Dto.Spatial.XYZ();
            }
            input.ReadMessage(T);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// All bodies inside share the same vertex basis and context classification.
  /// </summary>
  public sealed partial class Representation : pb::IMessage<Representation> {
    private static readonly pb::MessageParser<Representation> _parser = new pb::MessageParser<Representation>(() => new Representation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Representation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Representation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Representation(Representation other) : this() {
      context_ = other.context_;
      boundingBox_ = other.boundingBox_ != null ? other.boundingBox_.Clone() : null;
      points_ = other.points_.Clone();
      bodies_ = other.bodies_.Clone();
      wires_ = other.wires_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Representation Clone() {
      return new Representation(this);
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 1;
    private string context_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Context {
      get { return context_; }
      set {
        context_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "boundingBox" field.</summary>
    public const int BoundingBoxFieldNumber = 3;
    private global::Bitub.Dto.Spatial.BoundingBox boundingBox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Spatial.BoundingBox BoundingBox {
      get { return boundingBox_; }
      set {
        boundingBox_ = value;
      }
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Bitub.Dto.Scene.PtArray> _repeated_points_codec
        = pb::FieldCodec.ForMessage(42, global::Bitub.Dto.Scene.PtArray.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.Scene.PtArray> points_ = new pbc::RepeatedField<global::Bitub.Dto.Scene.PtArray>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.Scene.PtArray> Points {
      get { return points_; }
    }

    /// <summary>Field number for the "bodies" field.</summary>
    public const int BodiesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Bitub.Dto.Scene.FaceBody> _repeated_bodies_codec
        = pb::FieldCodec.ForMessage(50, global::Bitub.Dto.Scene.FaceBody.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.Scene.FaceBody> bodies_ = new pbc::RepeatedField<global::Bitub.Dto.Scene.FaceBody>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.Scene.FaceBody> Bodies {
      get { return bodies_; }
    }

    /// <summary>Field number for the "wires" field.</summary>
    public const int WiresFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Bitub.Dto.Scene.WireBody> _repeated_wires_codec
        = pb::FieldCodec.ForMessage(58, global::Bitub.Dto.Scene.WireBody.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.Scene.WireBody> wires_ = new pbc::RepeatedField<global::Bitub.Dto.Scene.WireBody>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.Scene.WireBody> Wires {
      get { return wires_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Representation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Representation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Context != other.Context) return false;
      if (!object.Equals(BoundingBox, other.BoundingBox)) return false;
      if(!points_.Equals(other.points_)) return false;
      if(!bodies_.Equals(other.bodies_)) return false;
      if(!wires_.Equals(other.wires_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Context.Length != 0) hash ^= Context.GetHashCode();
      if (boundingBox_ != null) hash ^= BoundingBox.GetHashCode();
      hash ^= points_.GetHashCode();
      hash ^= bodies_.GetHashCode();
      hash ^= wires_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Context.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Context);
      }
      if (boundingBox_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BoundingBox);
      }
      points_.WriteTo(output, _repeated_points_codec);
      bodies_.WriteTo(output, _repeated_bodies_codec);
      wires_.WriteTo(output, _repeated_wires_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Context.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Context);
      }
      if (boundingBox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoundingBox);
      }
      size += points_.CalculateSize(_repeated_points_codec);
      size += bodies_.CalculateSize(_repeated_bodies_codec);
      size += wires_.CalculateSize(_repeated_wires_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Representation other) {
      if (other == null) {
        return;
      }
      if (other.Context.Length != 0) {
        Context = other.Context;
      }
      if (other.boundingBox_ != null) {
        if (boundingBox_ == null) {
          BoundingBox = new global::Bitub.Dto.Spatial.BoundingBox();
        }
        BoundingBox.MergeFrom(other.BoundingBox);
      }
      points_.Add(other.points_);
      bodies_.Add(other.bodies_);
      wires_.Add(other.wires_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Context = input.ReadString();
            break;
          }
          case 26: {
            if (boundingBox_ == null) {
              BoundingBox = new global::Bitub.Dto.Spatial.BoundingBox();
            }
            input.ReadMessage(BoundingBox);
            break;
          }
          case 42: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
          case 50: {
            bodies_.AddEntriesFrom(input, _repeated_bodies_codec);
            break;
          }
          case 58: {
            wires_.AddEntriesFrom(input, _repeated_wires_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Atomic part of a component
  /// </summary>
  public sealed partial class Component : pb::IMessage<Component> {
    private static readonly pb::MessageParser<Component> _parser = new pb::MessageParser<Component>(() => new Component());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Component> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Component() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Component(Component other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      parent_ = other.parent_ != null ? other.parent_.Clone() : null;
      name_ = other.name_;
      concepts_ = other.concepts_.Clone();
      children_ = other.children_.Clone();
      representations_ = other.representations_.Clone();
      features_ = other.features_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Component Clone() {
      return new Component(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::Bitub.Dto.GlobalUniqueId id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.GlobalUniqueId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 2;
    private global::Bitub.Dto.GlobalUniqueId parent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.GlobalUniqueId Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "concepts" field.</summary>
    public const int ConceptsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Bitub.Dto.Classifier> _repeated_concepts_codec
        = pb::FieldCodec.ForMessage(50, global::Bitub.Dto.Classifier.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.Classifier> concepts_ = new pbc::RepeatedField<global::Bitub.Dto.Classifier>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.Classifier> Concepts {
      get { return concepts_; }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Bitub.Dto.GlobalUniqueId> _repeated_children_codec
        = pb::FieldCodec.ForMessage(58, global::Bitub.Dto.GlobalUniqueId.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.GlobalUniqueId> children_ = new pbc::RepeatedField<global::Bitub.Dto.GlobalUniqueId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.GlobalUniqueId> Children {
      get { return children_; }
    }

    /// <summary>Field number for the "representations" field.</summary>
    public const int RepresentationsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Bitub.Dto.Scene.Representation> _repeated_representations_codec
        = pb::FieldCodec.ForMessage(66, global::Bitub.Dto.Scene.Representation.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.Scene.Representation> representations_ = new pbc::RepeatedField<global::Bitub.Dto.Scene.Representation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.Scene.Representation> Representations {
      get { return representations_; }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Bitub.Dto.Classify.Feature> _repeated_features_codec
        = pb::FieldCodec.ForMessage(74, global::Bitub.Dto.Classify.Feature.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.Classify.Feature> features_ = new pbc::RepeatedField<global::Bitub.Dto.Classify.Feature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.Classify.Feature> Features {
      get { return features_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Component);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Component other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(Parent, other.Parent)) return false;
      if (Name != other.Name) return false;
      if(!concepts_.Equals(other.concepts_)) return false;
      if(!children_.Equals(other.children_)) return false;
      if(!representations_.Equals(other.representations_)) return false;
      if(!features_.Equals(other.features_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (parent_ != null) hash ^= Parent.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= concepts_.GetHashCode();
      hash ^= children_.GetHashCode();
      hash ^= representations_.GetHashCode();
      hash ^= features_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (parent_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Parent);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      concepts_.WriteTo(output, _repeated_concepts_codec);
      children_.WriteTo(output, _repeated_children_codec);
      representations_.WriteTo(output, _repeated_representations_codec);
      features_.WriteTo(output, _repeated_features_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (parent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parent);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += concepts_.CalculateSize(_repeated_concepts_codec);
      size += children_.CalculateSize(_repeated_children_codec);
      size += representations_.CalculateSize(_repeated_representations_codec);
      size += features_.CalculateSize(_repeated_features_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Component other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::Bitub.Dto.GlobalUniqueId();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.parent_ != null) {
        if (parent_ == null) {
          Parent = new global::Bitub.Dto.GlobalUniqueId();
        }
        Parent.MergeFrom(other.Parent);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      concepts_.Add(other.concepts_);
      children_.Add(other.children_);
      representations_.Add(other.representations_);
      features_.Add(other.features_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::Bitub.Dto.GlobalUniqueId();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            if (parent_ == null) {
              Parent = new global::Bitub.Dto.GlobalUniqueId();
            }
            input.ReadMessage(Parent);
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            concepts_.AddEntriesFrom(input, _repeated_concepts_codec);
            break;
          }
          case 58: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
          case 66: {
            representations_.AddEntriesFrom(input, _repeated_representations_codec);
            break;
          }
          case 74: {
            features_.AddEntriesFrom(input, _repeated_features_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Material 
  /// </summary>
  public sealed partial class Material : pb::IMessage<Material> {
    private static readonly pb::MessageParser<Material> _parser = new pb::MessageParser<Material>(() => new Material());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Material> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Material() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Material(Material other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      name_ = other.name_;
      hintRenderBothFaces_ = other.hintRenderBothFaces_;
      hintSwitchFrontRearFaces_ = other.hintSwitchFrontRearFaces_;
      colorChannels_ = other.colorChannels_.Clone();
      hintReflectionShader_ = other.hintReflectionShader_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Material Clone() {
      return new Material(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::Bitub.Dto.RefId id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.RefId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hintRenderBothFaces" field.</summary>
    public const int HintRenderBothFacesFieldNumber = 3;
    private bool hintRenderBothFaces_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HintRenderBothFaces {
      get { return hintRenderBothFaces_; }
      set {
        hintRenderBothFaces_ = value;
      }
    }

    /// <summary>Field number for the "hintSwitchFrontRearFaces" field.</summary>
    public const int HintSwitchFrontRearFacesFieldNumber = 4;
    private bool hintSwitchFrontRearFaces_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HintSwitchFrontRearFaces {
      get { return hintSwitchFrontRearFaces_; }
      set {
        hintSwitchFrontRearFaces_ = value;
      }
    }

    /// <summary>Field number for the "colorChannels" field.</summary>
    public const int ColorChannelsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Bitub.Dto.Scene.ColorOrNormalised> _repeated_colorChannels_codec
        = pb::FieldCodec.ForMessage(50, global::Bitub.Dto.Scene.ColorOrNormalised.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.Scene.ColorOrNormalised> colorChannels_ = new pbc::RepeatedField<global::Bitub.Dto.Scene.ColorOrNormalised>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.Scene.ColorOrNormalised> ColorChannels {
      get { return colorChannels_; }
    }

    /// <summary>Field number for the "hintReflectionShader" field.</summary>
    public const int HintReflectionShaderFieldNumber = 9;
    private string hintReflectionShader_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HintReflectionShader {
      get { return hintReflectionShader_; }
      set {
        hintReflectionShader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Material);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Material other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (Name != other.Name) return false;
      if (HintRenderBothFaces != other.HintRenderBothFaces) return false;
      if (HintSwitchFrontRearFaces != other.HintSwitchFrontRearFaces) return false;
      if(!colorChannels_.Equals(other.colorChannels_)) return false;
      if (HintReflectionShader != other.HintReflectionShader) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (HintRenderBothFaces != false) hash ^= HintRenderBothFaces.GetHashCode();
      if (HintSwitchFrontRearFaces != false) hash ^= HintSwitchFrontRearFaces.GetHashCode();
      hash ^= colorChannels_.GetHashCode();
      if (HintReflectionShader.Length != 0) hash ^= HintReflectionShader.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HintRenderBothFaces != false) {
        output.WriteRawTag(24);
        output.WriteBool(HintRenderBothFaces);
      }
      if (HintSwitchFrontRearFaces != false) {
        output.WriteRawTag(32);
        output.WriteBool(HintSwitchFrontRearFaces);
      }
      colorChannels_.WriteTo(output, _repeated_colorChannels_codec);
      if (HintReflectionShader.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(HintReflectionShader);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HintRenderBothFaces != false) {
        size += 1 + 1;
      }
      if (HintSwitchFrontRearFaces != false) {
        size += 1 + 1;
      }
      size += colorChannels_.CalculateSize(_repeated_colorChannels_codec);
      if (HintReflectionShader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HintReflectionShader);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Material other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::Bitub.Dto.RefId();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.HintRenderBothFaces != false) {
        HintRenderBothFaces = other.HintRenderBothFaces;
      }
      if (other.HintSwitchFrontRearFaces != false) {
        HintSwitchFrontRearFaces = other.HintSwitchFrontRearFaces;
      }
      colorChannels_.Add(other.colorChannels_);
      if (other.HintReflectionShader.Length != 0) {
        HintReflectionShader = other.HintReflectionShader;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::Bitub.Dto.RefId();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            HintRenderBothFaces = input.ReadBool();
            break;
          }
          case 32: {
            HintSwitchFrontRearFaces = input.ReadBool();
            break;
          }
          case 50: {
            colorChannels_.AddEntriesFrom(input, _repeated_colorChannels_codec);
            break;
          }
          case 74: {
            HintReflectionShader = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Select of absolute color or normalised (gray scale) color
  /// </summary>
  public sealed partial class ColorOrNormalised : pb::IMessage<ColorOrNormalised> {
    private static readonly pb::MessageParser<ColorOrNormalised> _parser = new pb::MessageParser<ColorOrNormalised>(() => new ColorOrNormalised());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColorOrNormalised> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorOrNormalised() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorOrNormalised(ColorOrNormalised other) : this() {
      channel_ = other.channel_;
      switch (other.ColorOrValueCase) {
        case ColorOrValueOneofCase.Color:
          Color = other.Color.Clone();
          break;
        case ColorOrValueOneofCase.Normalised:
          Normalised = other.Normalised;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorOrNormalised Clone() {
      return new ColorOrNormalised(this);
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 1;
    private global::Bitub.Dto.Scene.ColorChannel channel_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Scene.ColorChannel Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Scene.Color Color {
      get { return colorOrValueCase_ == ColorOrValueOneofCase.Color ? (global::Bitub.Dto.Scene.Color) colorOrValue_ : null; }
      set {
        colorOrValue_ = value;
        colorOrValueCase_ = value == null ? ColorOrValueOneofCase.None : ColorOrValueOneofCase.Color;
      }
    }

    /// <summary>Field number for the "normalised" field.</summary>
    public const int NormalisedFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Normalised {
      get { return colorOrValueCase_ == ColorOrValueOneofCase.Normalised ? (float) colorOrValue_ : 0F; }
      set {
        colorOrValue_ = value;
        colorOrValueCase_ = ColorOrValueOneofCase.Normalised;
      }
    }

    private object colorOrValue_;
    /// <summary>Enum of possible cases for the "colorOrValue" oneof.</summary>
    public enum ColorOrValueOneofCase {
      None = 0,
      Color = 2,
      Normalised = 3,
    }
    private ColorOrValueOneofCase colorOrValueCase_ = ColorOrValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColorOrValueOneofCase ColorOrValueCase {
      get { return colorOrValueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearColorOrValue() {
      colorOrValueCase_ = ColorOrValueOneofCase.None;
      colorOrValue_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColorOrNormalised);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColorOrNormalised other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Channel != other.Channel) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Normalised, other.Normalised)) return false;
      if (ColorOrValueCase != other.ColorOrValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (colorOrValueCase_ == ColorOrValueOneofCase.Color) hash ^= Color.GetHashCode();
      if (colorOrValueCase_ == ColorOrValueOneofCase.Normalised) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Normalised);
      hash ^= (int) colorOrValueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channel != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Channel);
      }
      if (colorOrValueCase_ == ColorOrValueOneofCase.Color) {
        output.WriteRawTag(18);
        output.WriteMessage(Color);
      }
      if (colorOrValueCase_ == ColorOrValueOneofCase.Normalised) {
        output.WriteRawTag(29);
        output.WriteFloat(Normalised);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Channel);
      }
      if (colorOrValueCase_ == ColorOrValueOneofCase.Color) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (colorOrValueCase_ == ColorOrValueOneofCase.Normalised) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColorOrNormalised other) {
      if (other == null) {
        return;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      switch (other.ColorOrValueCase) {
        case ColorOrValueOneofCase.Color:
          if (Color == null) {
            Color = new global::Bitub.Dto.Scene.Color();
          }
          Color.MergeFrom(other.Color);
          break;
        case ColorOrValueOneofCase.Normalised:
          Normalised = other.Normalised;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Channel = (global::Bitub.Dto.Scene.ColorChannel) input.ReadEnum();
            break;
          }
          case 18: {
            global::Bitub.Dto.Scene.Color subBuilder = new global::Bitub.Dto.Scene.Color();
            if (colorOrValueCase_ == ColorOrValueOneofCase.Color) {
              subBuilder.MergeFrom(Color);
            }
            input.ReadMessage(subBuilder);
            Color = subBuilder;
            break;
          }
          case 29: {
            Normalised = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Basic color and alpha
  /// </summary>
  public sealed partial class Color : pb::IMessage<Color> {
    private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Color> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color(Color other) : this() {
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
      a_ = other.a_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color Clone() {
      return new Color(this);
    }

    /// <summary>Field number for the "R" field.</summary>
    public const int RFieldNumber = 1;
    private float r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "G" field.</summary>
    public const int GFieldNumber = 2;
    private float g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "B" field.</summary>
    public const int BFieldNumber = 3;
    private float b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "A" field.</summary>
    public const int AFieldNumber = 4;
    private float a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Color);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Color other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(R, other.R)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(G, other.G)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(B, other.B)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(A, other.A)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(R);
      if (G != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(G);
      if (B != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(B);
      if (A != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(A);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (R != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(R);
      }
      if (G != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(G);
      }
      if (B != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(B);
      }
      if (A != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(A);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R != 0F) {
        size += 1 + 4;
      }
      if (G != 0F) {
        size += 1 + 4;
      }
      if (B != 0F) {
        size += 1 + 4;
      }
      if (A != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Color other) {
      if (other == null) {
        return;
      }
      if (other.R != 0F) {
        R = other.R;
      }
      if (other.G != 0F) {
        G = other.G;
      }
      if (other.B != 0F) {
        B = other.B;
      }
      if (other.A != 0F) {
        A = other.A;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            R = input.ReadFloat();
            break;
          }
          case 21: {
            G = input.ReadFloat();
            break;
          }
          case 29: {
            B = input.ReadFloat();
            break;
          }
          case 37: {
            A = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Scene meta data
  /// </summary>
  public sealed partial class SceneMetaData : pb::IMessage<SceneMetaData> {
    private static readonly pb::MessageParser<SceneMetaData> _parser = new pb::MessageParser<SceneMetaData>(() => new SceneMetaData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneMetaData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneMetaData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneMetaData(SceneMetaData other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      project_ = other.project_ != null ? other.project_.Clone() : null;
      description_ = other.description_;
      wgs84_ = other.wgs84_ != null ? other.wgs84_.Clone() : null;
      crs_ = other.crs_;
      hrs_ = other.hrs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneMetaData Clone() {
      return new SceneMetaData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::Bitub.Dto.GlobalUniqueId id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.GlobalUniqueId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "project" field.</summary>
    public const int ProjectFieldNumber = 2;
    private global::Bitub.Dto.Qualifier project_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Qualifier Project {
      get { return project_; }
      set {
        project_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wgs84" field.</summary>
    public const int Wgs84FieldNumber = 4;
    private global::Bitub.Dto.Spatial.LatLon wgs84_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Spatial.LatLon Wgs84 {
      get { return wgs84_; }
      set {
        wgs84_ = value;
      }
    }

    /// <summary>Field number for the "crs" field.</summary>
    public const int CrsFieldNumber = 5;
    private string crs_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Crs {
      get { return crs_; }
      set {
        crs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hrs" field.</summary>
    public const int HrsFieldNumber = 6;
    private string hrs_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hrs {
      get { return hrs_; }
      set {
        hrs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneMetaData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneMetaData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(Project, other.Project)) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Wgs84, other.Wgs84)) return false;
      if (Crs != other.Crs) return false;
      if (Hrs != other.Hrs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (project_ != null) hash ^= Project.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (wgs84_ != null) hash ^= Wgs84.GetHashCode();
      if (Crs.Length != 0) hash ^= Crs.GetHashCode();
      if (Hrs.Length != 0) hash ^= Hrs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (project_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Project);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (wgs84_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Wgs84);
      }
      if (Crs.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Crs);
      }
      if (Hrs.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Hrs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (project_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Project);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (wgs84_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wgs84);
      }
      if (Crs.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Crs);
      }
      if (Hrs.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hrs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneMetaData other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::Bitub.Dto.GlobalUniqueId();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.project_ != null) {
        if (project_ == null) {
          Project = new global::Bitub.Dto.Qualifier();
        }
        Project.MergeFrom(other.Project);
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.wgs84_ != null) {
        if (wgs84_ == null) {
          Wgs84 = new global::Bitub.Dto.Spatial.LatLon();
        }
        Wgs84.MergeFrom(other.Wgs84);
      }
      if (other.Crs.Length != 0) {
        Crs = other.Crs;
      }
      if (other.Hrs.Length != 0) {
        Hrs = other.Hrs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::Bitub.Dto.GlobalUniqueId();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            if (project_ == null) {
              Project = new global::Bitub.Dto.Qualifier();
            }
            input.ReadMessage(Project);
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            if (wgs84_ == null) {
              Wgs84 = new global::Bitub.Dto.Spatial.LatLon();
            }
            input.ReadMessage(Wgs84);
            break;
          }
          case 42: {
            Crs = input.ReadString();
            break;
          }
          case 50: {
            Hrs = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Global root message
  /// </summary>
  public sealed partial class SceneModel : pb::IMessage<SceneModel> {
    private static readonly pb::MessageParser<SceneModel> _parser = new pb::MessageParser<SceneModel>(() => new SceneModel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneModel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneModel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneModel(SceneModel other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      name_ = other.name_;
      unitsPerMeter_ = other.unitsPerMeter_;
      stamp_ = other.stamp_ != null ? other.stamp_.Clone() : null;
      contexts_ = other.contexts_.Clone();
      materials_ = other.materials_.Clone();
      components_ = other.components_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneModel Clone() {
      return new SceneModel(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::Bitub.Dto.GlobalUniqueId id_;
    /// <summary>
    /// SceneMetaData metadata = 1;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.GlobalUniqueId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unitsPerMeter" field.</summary>
    public const int UnitsPerMeterFieldNumber = 3;
    private double unitsPerMeter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UnitsPerMeter {
      get { return unitsPerMeter_; }
      set {
        unitsPerMeter_ = value;
      }
    }

    /// <summary>Field number for the "stamp" field.</summary>
    public const int StampFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp stamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Stamp {
      get { return stamp_; }
      set {
        stamp_ = value;
      }
    }

    /// <summary>Field number for the "contexts" field.</summary>
    public const int ContextsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Bitub.Dto.Scene.SceneContext> _repeated_contexts_codec
        = pb::FieldCodec.ForMessage(42, global::Bitub.Dto.Scene.SceneContext.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.Scene.SceneContext> contexts_ = new pbc::RepeatedField<global::Bitub.Dto.Scene.SceneContext>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.Scene.SceneContext> Contexts {
      get { return contexts_; }
    }

    /// <summary>Field number for the "materials" field.</summary>
    public const int MaterialsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Bitub.Dto.Scene.Material> _repeated_materials_codec
        = pb::FieldCodec.ForMessage(50, global::Bitub.Dto.Scene.Material.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.Scene.Material> materials_ = new pbc::RepeatedField<global::Bitub.Dto.Scene.Material>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.Scene.Material> Materials {
      get { return materials_; }
    }

    /// <summary>Field number for the "components" field.</summary>
    public const int ComponentsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Bitub.Dto.Scene.Component> _repeated_components_codec
        = pb::FieldCodec.ForMessage(58, global::Bitub.Dto.Scene.Component.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.Scene.Component> components_ = new pbc::RepeatedField<global::Bitub.Dto.Scene.Component>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.Scene.Component> Components {
      get { return components_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneModel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneModel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UnitsPerMeter, other.UnitsPerMeter)) return false;
      if (!object.Equals(Stamp, other.Stamp)) return false;
      if(!contexts_.Equals(other.contexts_)) return false;
      if(!materials_.Equals(other.materials_)) return false;
      if(!components_.Equals(other.components_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (UnitsPerMeter != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UnitsPerMeter);
      if (stamp_ != null) hash ^= Stamp.GetHashCode();
      hash ^= contexts_.GetHashCode();
      hash ^= materials_.GetHashCode();
      hash ^= components_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (UnitsPerMeter != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(UnitsPerMeter);
      }
      if (stamp_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Stamp);
      }
      contexts_.WriteTo(output, _repeated_contexts_codec);
      materials_.WriteTo(output, _repeated_materials_codec);
      components_.WriteTo(output, _repeated_components_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (UnitsPerMeter != 0D) {
        size += 1 + 8;
      }
      if (stamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stamp);
      }
      size += contexts_.CalculateSize(_repeated_contexts_codec);
      size += materials_.CalculateSize(_repeated_materials_codec);
      size += components_.CalculateSize(_repeated_components_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneModel other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::Bitub.Dto.GlobalUniqueId();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.UnitsPerMeter != 0D) {
        UnitsPerMeter = other.UnitsPerMeter;
      }
      if (other.stamp_ != null) {
        if (stamp_ == null) {
          Stamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Stamp.MergeFrom(other.Stamp);
      }
      contexts_.Add(other.contexts_);
      materials_.Add(other.materials_);
      components_.Add(other.components_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::Bitub.Dto.GlobalUniqueId();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 25: {
            UnitsPerMeter = input.ReadDouble();
            break;
          }
          case 34: {
            if (stamp_ == null) {
              Stamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Stamp);
            break;
          }
          case 42: {
            contexts_.AddEntriesFrom(input, _repeated_contexts_codec);
            break;
          }
          case 50: {
            materials_.AddEntriesFrom(input, _repeated_materials_codec);
            break;
          }
          case 58: {
            components_.AddEntriesFrom(input, _repeated_components_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Context related data
  /// </summary>
  public sealed partial class SceneContext : pb::IMessage<SceneContext> {
    private static readonly pb::MessageParser<SceneContext> _parser = new pb::MessageParser<SceneContext>(() => new SceneContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneContext(SceneContext other) : this() {
      name_ = other.name_;
      fDeflection_ = other.fDeflection_;
      fTolerance_ = other.fTolerance_;
      wcs_ = other.wcs_ != null ? other.wcs_.Clone() : null;
      regions_ = other.regions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneContext Clone() {
      return new SceneContext(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fDeflection" field.</summary>
    public const int FDeflectionFieldNumber = 2;
    private double fDeflection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FDeflection {
      get { return fDeflection_; }
      set {
        fDeflection_ = value;
      }
    }

    /// <summary>Field number for the "fTolerance" field.</summary>
    public const int FToleranceFieldNumber = 3;
    private double fTolerance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FTolerance {
      get { return fTolerance_; }
      set {
        fTolerance_ = value;
      }
    }

    /// <summary>Field number for the "wcs" field.</summary>
    public const int WcsFieldNumber = 5;
    private global::Bitub.Dto.Scene.Transform wcs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Scene.Transform Wcs {
      get { return wcs_; }
      set {
        wcs_ = value;
      }
    }

    /// <summary>Field number for the "regions" field.</summary>
    public const int RegionsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Bitub.Dto.Spatial.Region> _repeated_regions_codec
        = pb::FieldCodec.ForMessage(50, global::Bitub.Dto.Spatial.Region.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.Spatial.Region> regions_ = new pbc::RepeatedField<global::Bitub.Dto.Spatial.Region>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.Spatial.Region> Regions {
      get { return regions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FDeflection, other.FDeflection)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FTolerance, other.FTolerance)) return false;
      if (!object.Equals(Wcs, other.Wcs)) return false;
      if(!regions_.Equals(other.regions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (FDeflection != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FDeflection);
      if (FTolerance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FTolerance);
      if (wcs_ != null) hash ^= Wcs.GetHashCode();
      hash ^= regions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (FDeflection != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(FDeflection);
      }
      if (FTolerance != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(FTolerance);
      }
      if (wcs_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Wcs);
      }
      regions_.WriteTo(output, _repeated_regions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (FDeflection != 0D) {
        size += 1 + 8;
      }
      if (FTolerance != 0D) {
        size += 1 + 8;
      }
      if (wcs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wcs);
      }
      size += regions_.CalculateSize(_repeated_regions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneContext other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.FDeflection != 0D) {
        FDeflection = other.FDeflection;
      }
      if (other.FTolerance != 0D) {
        FTolerance = other.FTolerance;
      }
      if (other.wcs_ != null) {
        if (wcs_ == null) {
          Wcs = new global::Bitub.Dto.Scene.Transform();
        }
        Wcs.MergeFrom(other.Wcs);
      }
      regions_.Add(other.regions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 17: {
            FDeflection = input.ReadDouble();
            break;
          }
          case 25: {
            FTolerance = input.ReadDouble();
            break;
          }
          case 42: {
            if (wcs_ == null) {
              Wcs = new global::Bitub.Dto.Scene.Transform();
            }
            input.ReadMessage(Wcs);
            break;
          }
          case 50: {
            regions_.AddEntriesFrom(input, _repeated_regions_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A spatial sceene request
  /// </summary>
  public sealed partial class SceneModelRequest : pb::IMessage<SceneModelRequest> {
    private static readonly pb::MessageParser<SceneModelRequest> _parser = new pb::MessageParser<SceneModelRequest>(() => new SceneModelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneModelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.Scene.SceneReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneModelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneModelRequest(SceneModelRequest other) : this() {
      id_ = other.id_ != null ? other.id_.Clone() : null;
      scene_ = other.scene_ != null ? other.scene_.Clone() : null;
      sceneDataType_ = other.sceneDataType_;
      requestToken_ = other.requestToken_ != null ? other.requestToken_.Clone() : null;
      filter_ = other.filter_.Clone();
      switch (other.ViewpointOrABoxCase) {
        case ViewpointOrABoxOneofCase.Viewpoint:
          Viewpoint = other.Viewpoint.Clone();
          break;
        case ViewpointOrABoxOneofCase.Abox:
          Abox = other.Abox.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneModelRequest Clone() {
      return new SceneModelRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::Bitub.Dto.RefId id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.RefId Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "scene" field.</summary>
    public const int SceneFieldNumber = 2;
    private global::Bitub.Dto.Qualifier scene_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Qualifier Scene {
      get { return scene_; }
      set {
        scene_ = value;
      }
    }

    /// <summary>Field number for the "sceneDataType" field.</summary>
    public const int SceneDataTypeFieldNumber = 3;
    private global::Bitub.Dto.Scene.SceneDataType sceneDataType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Scene.SceneDataType SceneDataType {
      get { return sceneDataType_; }
      set {
        sceneDataType_ = value;
      }
    }

    /// <summary>Field number for the "viewpoint" field.</summary>
    public const int ViewpointFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Spatial.Viewpoint Viewpoint {
      get { return viewpointOrABoxCase_ == ViewpointOrABoxOneofCase.Viewpoint ? (global::Bitub.Dto.Spatial.Viewpoint) viewpointOrABox_ : null; }
      set {
        viewpointOrABox_ = value;
        viewpointOrABoxCase_ = value == null ? ViewpointOrABoxOneofCase.None : ViewpointOrABoxOneofCase.Viewpoint;
      }
    }

    /// <summary>Field number for the "abox" field.</summary>
    public const int AboxFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Spatial.ABox Abox {
      get { return viewpointOrABoxCase_ == ViewpointOrABoxOneofCase.Abox ? (global::Bitub.Dto.Spatial.ABox) viewpointOrABox_ : null; }
      set {
        viewpointOrABox_ = value;
        viewpointOrABoxCase_ = value == null ? ViewpointOrABoxOneofCase.None : ViewpointOrABoxOneofCase.Abox;
      }
    }

    /// <summary>Field number for the "requestToken" field.</summary>
    public const int RequestTokenFieldNumber = 6;
    private global::Bitub.Dto.Qualifier requestToken_;
    /// <summary>
    /// If true, only deliver new data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Qualifier RequestToken {
      get { return requestToken_; }
      set {
        requestToken_ = value;
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Bitub.Dto.Qualifier> _repeated_filter_codec
        = pb::FieldCodec.ForMessage(58, global::Bitub.Dto.Qualifier.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.Qualifier> filter_ = new pbc::RepeatedField<global::Bitub.Dto.Qualifier>();
    /// <summary>
    /// Prefilter scene by qualifiers (based on scene components classification)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.Qualifier> Filter {
      get { return filter_; }
    }

    private object viewpointOrABox_;
    /// <summary>Enum of possible cases for the "viewpointOrABox" oneof.</summary>
    public enum ViewpointOrABoxOneofCase {
      None = 0,
      Viewpoint = 4,
      Abox = 5,
    }
    private ViewpointOrABoxOneofCase viewpointOrABoxCase_ = ViewpointOrABoxOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ViewpointOrABoxOneofCase ViewpointOrABoxCase {
      get { return viewpointOrABoxCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearViewpointOrABox() {
      viewpointOrABoxCase_ = ViewpointOrABoxOneofCase.None;
      viewpointOrABox_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneModelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneModelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (!object.Equals(Scene, other.Scene)) return false;
      if (SceneDataType != other.SceneDataType) return false;
      if (!object.Equals(Viewpoint, other.Viewpoint)) return false;
      if (!object.Equals(Abox, other.Abox)) return false;
      if (!object.Equals(RequestToken, other.RequestToken)) return false;
      if(!filter_.Equals(other.filter_)) return false;
      if (ViewpointOrABoxCase != other.ViewpointOrABoxCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (scene_ != null) hash ^= Scene.GetHashCode();
      if (SceneDataType != 0) hash ^= SceneDataType.GetHashCode();
      if (viewpointOrABoxCase_ == ViewpointOrABoxOneofCase.Viewpoint) hash ^= Viewpoint.GetHashCode();
      if (viewpointOrABoxCase_ == ViewpointOrABoxOneofCase.Abox) hash ^= Abox.GetHashCode();
      if (requestToken_ != null) hash ^= RequestToken.GetHashCode();
      hash ^= filter_.GetHashCode();
      hash ^= (int) viewpointOrABoxCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (scene_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Scene);
      }
      if (SceneDataType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) SceneDataType);
      }
      if (viewpointOrABoxCase_ == ViewpointOrABoxOneofCase.Viewpoint) {
        output.WriteRawTag(34);
        output.WriteMessage(Viewpoint);
      }
      if (viewpointOrABoxCase_ == ViewpointOrABoxOneofCase.Abox) {
        output.WriteRawTag(42);
        output.WriteMessage(Abox);
      }
      if (requestToken_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RequestToken);
      }
      filter_.WriteTo(output, _repeated_filter_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (scene_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scene);
      }
      if (SceneDataType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SceneDataType);
      }
      if (viewpointOrABoxCase_ == ViewpointOrABoxOneofCase.Viewpoint) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Viewpoint);
      }
      if (viewpointOrABoxCase_ == ViewpointOrABoxOneofCase.Abox) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Abox);
      }
      if (requestToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestToken);
      }
      size += filter_.CalculateSize(_repeated_filter_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneModelRequest other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          Id = new global::Bitub.Dto.RefId();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.scene_ != null) {
        if (scene_ == null) {
          Scene = new global::Bitub.Dto.Qualifier();
        }
        Scene.MergeFrom(other.Scene);
      }
      if (other.SceneDataType != 0) {
        SceneDataType = other.SceneDataType;
      }
      if (other.requestToken_ != null) {
        if (requestToken_ == null) {
          RequestToken = new global::Bitub.Dto.Qualifier();
        }
        RequestToken.MergeFrom(other.RequestToken);
      }
      filter_.Add(other.filter_);
      switch (other.ViewpointOrABoxCase) {
        case ViewpointOrABoxOneofCase.Viewpoint:
          if (Viewpoint == null) {
            Viewpoint = new global::Bitub.Dto.Spatial.Viewpoint();
          }
          Viewpoint.MergeFrom(other.Viewpoint);
          break;
        case ViewpointOrABoxOneofCase.Abox:
          if (Abox == null) {
            Abox = new global::Bitub.Dto.Spatial.ABox();
          }
          Abox.MergeFrom(other.Abox);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (id_ == null) {
              Id = new global::Bitub.Dto.RefId();
            }
            input.ReadMessage(Id);
            break;
          }
          case 18: {
            if (scene_ == null) {
              Scene = new global::Bitub.Dto.Qualifier();
            }
            input.ReadMessage(Scene);
            break;
          }
          case 24: {
            SceneDataType = (global::Bitub.Dto.Scene.SceneDataType) input.ReadEnum();
            break;
          }
          case 34: {
            global::Bitub.Dto.Spatial.Viewpoint subBuilder = new global::Bitub.Dto.Spatial.Viewpoint();
            if (viewpointOrABoxCase_ == ViewpointOrABoxOneofCase.Viewpoint) {
              subBuilder.MergeFrom(Viewpoint);
            }
            input.ReadMessage(subBuilder);
            Viewpoint = subBuilder;
            break;
          }
          case 42: {
            global::Bitub.Dto.Spatial.ABox subBuilder = new global::Bitub.Dto.Spatial.ABox();
            if (viewpointOrABoxCase_ == ViewpointOrABoxOneofCase.Abox) {
              subBuilder.MergeFrom(Abox);
            }
            input.ReadMessage(subBuilder);
            Abox = subBuilder;
            break;
          }
          case 50: {
            if (requestToken_ == null) {
              RequestToken = new global::Bitub.Dto.Qualifier();
            }
            input.ReadMessage(RequestToken);
            break;
          }
          case 58: {
            filter_.AddEntriesFrom(input, _repeated_filter_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
