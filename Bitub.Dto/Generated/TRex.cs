// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: TRex.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bitub.Dto.TRex {

  /// <summary>Holder for reflection information generated from TRex.proto</summary>
  public static partial class TRexReflection {

    #region Descriptor
    /// <summary>File descriptor for TRex.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TRexReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpUUmV4LnByb3RvEg5CaXR1Yi5EdG8uVFJleBoMQ29tbW9uLnByb3RvIlMK",
            "CkpvYlJlcXVlc3QSIgoEbmFtZRgBIAEoCzIULkJpdHViLkR0by5RdWFsaWZp",
            "ZXISIQoEam9icxgCIAMoCzITLkJpdHViLkR0by5UUmV4LkpvYiJKChBKb2JT",
            "dGF0ZVJlc3BvbnNlEiIKBG5hbWUYASABKAsyFC5CaXR1Yi5EdG8uUXVhbGlm",
            "aWVyEhIKCnBlcmNlbnRhZ2UYAyABKA0iSwoPSm9iU3RhdGVNZXNzYWdlEicK",
            "BXN0YXRlGAEgASgOMhguQml0dWIuRHRvLlRSZXguSm9iU3RhdGUSDwoHbWVz",
            "c2FnZRgCIAEoCSKZAgoDSm9iEjQKDHByb3BlcnR5UGlwZRgBIAEoCzIcLkJp",
            "dHViLkR0by5UUmV4LlByb3BlcnR5UGlwZUgAEjQKDXByb3BlcnR5QWRkb24Y",
            "AiABKAsyGy5CaXR1Yi5EdG8uVFJleC5Qcm9wZXJ0eURlZkgAEjMKD3Byb3Bl",
            "cnR5UmVtb3ZhbBgDIAEoCzIYLkJpdHViLkR0by5UUmV4LlByb3BlcnR5SAAS",
            "MwoScHJvcGVydHlTZXRSZW1vdmFsGAQgASgLMhUuQml0dWIuRHRvLkNsYXNz",
            "aWZpZXJIABIvCg5lbGVtZW50UmVtb3ZhbBgFIAEoCzIVLkJpdHViLkR0by5D",
            "bGFzc2lmaWVySABCCwoJam9iU3dpdGNoIjcKDEVsZW1lbnRTY29wZRInCghl",
            "bGVtZW50cxgBIAMoCzIVLkJpdHViLkR0by5DbGFzc2lmaWVyIs0BCgxQcm9w",
            "ZXJ0eVBpcGUSOAoEdHlwZRgBIAEoDjIqLkJpdHViLkR0by5UUmV4LlByb3Bl",
            "cnR5UGlwZS5Db2xsZWN0b3JUeXBlEigKBnNvdXJjZRgCIAEoCzIYLkJpdHVi",
            "LkR0by5UUmV4LlByb3BlcnR5EigKBnRhcmdldBgDIAEoCzIYLkJpdHViLkR0",
            "by5UUmV4LlByb3BlcnR5Ii8KDUNvbGxlY3RvclR5cGUSCgoGTEFURVNUEAAS",
            "CQoFRklSU1QQARIHCgNBTEwQAiKPAQoIUHJvcGVydHkSIgoEbmFtZRgBIAEo",
            "CzIULkJpdHViLkR0by5RdWFsaWZpZXISKwoFc2NvcGUYAiABKAsyHC5CaXR1",
            "Yi5EdG8uVFJleC5FbGVtZW50U2NvcGUSMgoIdW5pdFR5cGUYAyABKAsyIC5C",
            "aXR1Yi5EdG8uVFJleC5Qcm9wZXJ0eVVuaXRUeXBlImgKC1Byb3BlcnR5RGVm",
            "EioKCHByb3BlcnR5GAEgASgLMhguQml0dWIuRHRvLlRSZXguUHJvcGVydHkS",
            "LQoGdmFsdWVzGAIgAygLMh0uQml0dWIuRHRvLlRSZXguUHJvcGVydHlWYWx1",
            "ZSJqCg1Qcm9wZXJ0eVZhbHVlEg8KBWRpZ2l0GAUgASgBSAASEAoGc2VyaWFs",
            "GAYgASgJSAASJwoCaWQYByABKAsyGS5CaXR1Yi5EdG8uR2xvYmFsVW5pcXVl",
            "SWRIAEINCgt2YWx1ZVN3aXRjaCKdAQoQUHJvcGVydHlVbml0VHlwZRIqCgR0",
            "eXBlGAEgASgOMhwuQml0dWIuRHRvLlRSZXguUHJvcGVydHlUeXBlEiQKBHVu",
            "aXQYAiABKA4yFi5CaXR1Yi5EdG8uVFJleC5Vbml0U0kSKgoGcHJlZml4GAMg",
            "ASgOMhouQml0dWIuRHRvLlRSZXguVW5pdFByZWZpeBILCgNkaW0YBCABKA0q",
            "SAoISm9iU3RhdGUSDQoJU0NIRURVTEVEEAASEgoOTk9UX0FQUExJQ0FCTEUQ",
            "ARIKCgZGQUlMRUQQAhINCglTVUNDRUVERUQQAypzCgxQcm9wZXJ0eVR5cGUS",
            "DQoJVU5ERUZJTkVEEAASCQoFTEFCRUwQARIICgRHVUlEEAISBgoCSUQQAxIJ",
            "CgVESUdJVBAEEgsKB0lOVEVHRVIQBRIICgRURVhUEAYSCAoERU5VTRAHEgsK",
            "B0JPT0xFQU4QCCodCgZVbml0U0kSCAoETk9ORRAAEgkKBU1FVEVSEAEqaQoK",
            "VW5pdFByZWZpeBIICgRVTklUEAASCAoEREVDSRACEgkKBUNFTlRJEAMSCAoE",
            "S0lMTxAEEggKBE1FR0EQBRIICgRHSUdBEAYSCQoFTUlMTEkQBxIJCgVNSUNS",
            "TxAIEggKBE5BTk8QCUIcCgliaXR1Yi5kdG+qAg5CaXR1Yi5EdG8uVFJleGIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bitub.Dto.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Bitub.Dto.TRex.JobState), typeof(global::Bitub.Dto.TRex.PropertyType), typeof(global::Bitub.Dto.TRex.UnitSI), typeof(global::Bitub.Dto.TRex.UnitPrefix), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.TRex.JobRequest), global::Bitub.Dto.TRex.JobRequest.Parser, new[]{ "Name", "Jobs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.TRex.JobStateResponse), global::Bitub.Dto.TRex.JobStateResponse.Parser, new[]{ "Name", "Percentage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.TRex.JobStateMessage), global::Bitub.Dto.TRex.JobStateMessage.Parser, new[]{ "State", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.TRex.Job), global::Bitub.Dto.TRex.Job.Parser, new[]{ "PropertyPipe", "PropertyAddon", "PropertyRemoval", "PropertySetRemoval", "ElementRemoval" }, new[]{ "JobSwitch" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.TRex.ElementScope), global::Bitub.Dto.TRex.ElementScope.Parser, new[]{ "Elements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.TRex.PropertyPipe), global::Bitub.Dto.TRex.PropertyPipe.Parser, new[]{ "Type", "Source", "Target" }, null, new[]{ typeof(global::Bitub.Dto.TRex.PropertyPipe.Types.CollectorType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.TRex.Property), global::Bitub.Dto.TRex.Property.Parser, new[]{ "Name", "Scope", "UnitType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.TRex.PropertyDef), global::Bitub.Dto.TRex.PropertyDef.Parser, new[]{ "Property", "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.TRex.PropertyValue), global::Bitub.Dto.TRex.PropertyValue.Parser, new[]{ "Digit", "Serial", "Id" }, new[]{ "ValueSwitch" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Dto.TRex.PropertyUnitType), global::Bitub.Dto.TRex.PropertyUnitType.Parser, new[]{ "Type", "Unit", "Prefix", "Dim" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum JobState {
    [pbr::OriginalName("SCHEDULED")] Scheduled = 0,
    [pbr::OriginalName("NOT_APPLICABLE")] NotApplicable = 1,
    [pbr::OriginalName("FAILED")] Failed = 2,
    [pbr::OriginalName("SUCCEEDED")] Succeeded = 3,
  }

  /// <summary>
  /// Available Property types
  /// </summary>
  public enum PropertyType {
    [pbr::OriginalName("UNDEFINED")] Undefined = 0,
    [pbr::OriginalName("LABEL")] Label = 1,
    [pbr::OriginalName("GUID")] Guid = 2,
    [pbr::OriginalName("ID")] Id = 3,
    [pbr::OriginalName("DIGIT")] Digit = 4,
    [pbr::OriginalName("INTEGER")] Integer = 5,
    [pbr::OriginalName("TEXT")] Text = 6,
    [pbr::OriginalName("ENUM")] Enum = 7,
    [pbr::OriginalName("BOOLEAN")] Boolean = 8,
  }

  /// <summary>
  /// SI Unit
  /// </summary>
  public enum UnitSI {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("METER")] Meter = 1,
  }

  /// <summary>
  /// Unit's prefix
  /// </summary>
  public enum UnitPrefix {
    [pbr::OriginalName("UNIT")] Unit = 0,
    [pbr::OriginalName("DECI")] Deci = 2,
    [pbr::OriginalName("CENTI")] Centi = 3,
    [pbr::OriginalName("KILO")] Kilo = 4,
    [pbr::OriginalName("MEGA")] Mega = 5,
    [pbr::OriginalName("GIGA")] Giga = 6,
    [pbr::OriginalName("MILLI")] Milli = 7,
    [pbr::OriginalName("MICRO")] Micro = 8,
    [pbr::OriginalName("NANO")] Nano = 9,
  }

  #endregion

  #region Messages
  /// <summary>
  /// A Job request
  /// </summary>
  public sealed partial class JobRequest : pb::IMessage<JobRequest> {
    private static readonly pb::MessageParser<JobRequest> _parser = new pb::MessageParser<JobRequest>(() => new JobRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JobRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.TRex.TRexReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobRequest(JobRequest other) : this() {
      name_ = other.name_ != null ? other.name_.Clone() : null;
      jobs_ = other.jobs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobRequest Clone() {
      return new JobRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private global::Bitub.Dto.Qualifier name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Qualifier Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "jobs" field.</summary>
    public const int JobsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bitub.Dto.TRex.Job> _repeated_jobs_codec
        = pb::FieldCodec.ForMessage(18, global::Bitub.Dto.TRex.Job.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.TRex.Job> jobs_ = new pbc::RepeatedField<global::Bitub.Dto.TRex.Job>();
    /// <summary>
    /// TODO Fail on first failure
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.TRex.Job> Jobs {
      get { return jobs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JobRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JobRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Name, other.Name)) return false;
      if(!jobs_.Equals(other.jobs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (name_ != null) hash ^= Name.GetHashCode();
      hash ^= jobs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (name_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Name);
      }
      jobs_.WriteTo(output, _repeated_jobs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      size += jobs_.CalculateSize(_repeated_jobs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JobRequest other) {
      if (other == null) {
        return;
      }
      if (other.name_ != null) {
        if (name_ == null) {
          Name = new global::Bitub.Dto.Qualifier();
        }
        Name.MergeFrom(other.Name);
      }
      jobs_.Add(other.jobs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (name_ == null) {
              Name = new global::Bitub.Dto.Qualifier();
            }
            input.ReadMessage(Name);
            break;
          }
          case 18: {
            jobs_.AddEntriesFrom(input, _repeated_jobs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Job response
  /// </summary>
  public sealed partial class JobStateResponse : pb::IMessage<JobStateResponse> {
    private static readonly pb::MessageParser<JobStateResponse> _parser = new pb::MessageParser<JobStateResponse>(() => new JobStateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JobStateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.TRex.TRexReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobStateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobStateResponse(JobStateResponse other) : this() {
      name_ = other.name_ != null ? other.name_.Clone() : null;
      percentage_ = other.percentage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobStateResponse Clone() {
      return new JobStateResponse(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private global::Bitub.Dto.Qualifier name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Qualifier Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "percentage" field.</summary>
    public const int PercentageFieldNumber = 3;
    private uint percentage_;
    /// <summary>
    /// TODO Done jobs? Messages?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Percentage {
      get { return percentage_; }
      set {
        percentage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JobStateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JobStateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Name, other.Name)) return false;
      if (Percentage != other.Percentage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (name_ != null) hash ^= Name.GetHashCode();
      if (Percentage != 0) hash ^= Percentage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (name_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Name);
      }
      if (Percentage != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Percentage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      if (Percentage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Percentage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JobStateResponse other) {
      if (other == null) {
        return;
      }
      if (other.name_ != null) {
        if (name_ == null) {
          Name = new global::Bitub.Dto.Qualifier();
        }
        Name.MergeFrom(other.Name);
      }
      if (other.Percentage != 0) {
        Percentage = other.Percentage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (name_ == null) {
              Name = new global::Bitub.Dto.Qualifier();
            }
            input.ReadMessage(Name);
            break;
          }
          case 24: {
            Percentage = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class JobStateMessage : pb::IMessage<JobStateMessage> {
    private static readonly pb::MessageParser<JobStateMessage> _parser = new pb::MessageParser<JobStateMessage>(() => new JobStateMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JobStateMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.TRex.TRexReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobStateMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobStateMessage(JobStateMessage other) : this() {
      state_ = other.state_;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobStateMessage Clone() {
      return new JobStateMessage(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Bitub.Dto.TRex.JobState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.TRex.JobState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JobStateMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JobStateMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JobStateMessage other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::Bitub.Dto.TRex.JobState) input.ReadEnum();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Job switch
  /// </summary>
  public sealed partial class Job : pb::IMessage<Job> {
    private static readonly pb::MessageParser<Job> _parser = new pb::MessageParser<Job>(() => new Job());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Job> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.TRex.TRexReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Job() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Job(Job other) : this() {
      switch (other.JobSwitchCase) {
        case JobSwitchOneofCase.PropertyPipe:
          PropertyPipe = other.PropertyPipe.Clone();
          break;
        case JobSwitchOneofCase.PropertyAddon:
          PropertyAddon = other.PropertyAddon.Clone();
          break;
        case JobSwitchOneofCase.PropertyRemoval:
          PropertyRemoval = other.PropertyRemoval.Clone();
          break;
        case JobSwitchOneofCase.PropertySetRemoval:
          PropertySetRemoval = other.PropertySetRemoval.Clone();
          break;
        case JobSwitchOneofCase.ElementRemoval:
          ElementRemoval = other.ElementRemoval.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Job Clone() {
      return new Job(this);
    }

    /// <summary>Field number for the "propertyPipe" field.</summary>
    public const int PropertyPipeFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.TRex.PropertyPipe PropertyPipe {
      get { return jobSwitchCase_ == JobSwitchOneofCase.PropertyPipe ? (global::Bitub.Dto.TRex.PropertyPipe) jobSwitch_ : null; }
      set {
        jobSwitch_ = value;
        jobSwitchCase_ = value == null ? JobSwitchOneofCase.None : JobSwitchOneofCase.PropertyPipe;
      }
    }

    /// <summary>Field number for the "propertyAddon" field.</summary>
    public const int PropertyAddonFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.TRex.PropertyDef PropertyAddon {
      get { return jobSwitchCase_ == JobSwitchOneofCase.PropertyAddon ? (global::Bitub.Dto.TRex.PropertyDef) jobSwitch_ : null; }
      set {
        jobSwitch_ = value;
        jobSwitchCase_ = value == null ? JobSwitchOneofCase.None : JobSwitchOneofCase.PropertyAddon;
      }
    }

    /// <summary>Field number for the "propertyRemoval" field.</summary>
    public const int PropertyRemovalFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.TRex.Property PropertyRemoval {
      get { return jobSwitchCase_ == JobSwitchOneofCase.PropertyRemoval ? (global::Bitub.Dto.TRex.Property) jobSwitch_ : null; }
      set {
        jobSwitch_ = value;
        jobSwitchCase_ = value == null ? JobSwitchOneofCase.None : JobSwitchOneofCase.PropertyRemoval;
      }
    }

    /// <summary>Field number for the "propertySetRemoval" field.</summary>
    public const int PropertySetRemovalFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Classifier PropertySetRemoval {
      get { return jobSwitchCase_ == JobSwitchOneofCase.PropertySetRemoval ? (global::Bitub.Dto.Classifier) jobSwitch_ : null; }
      set {
        jobSwitch_ = value;
        jobSwitchCase_ = value == null ? JobSwitchOneofCase.None : JobSwitchOneofCase.PropertySetRemoval;
      }
    }

    /// <summary>Field number for the "elementRemoval" field.</summary>
    public const int ElementRemovalFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Classifier ElementRemoval {
      get { return jobSwitchCase_ == JobSwitchOneofCase.ElementRemoval ? (global::Bitub.Dto.Classifier) jobSwitch_ : null; }
      set {
        jobSwitch_ = value;
        jobSwitchCase_ = value == null ? JobSwitchOneofCase.None : JobSwitchOneofCase.ElementRemoval;
      }
    }

    private object jobSwitch_;
    /// <summary>Enum of possible cases for the "jobSwitch" oneof.</summary>
    public enum JobSwitchOneofCase {
      None = 0,
      PropertyPipe = 1,
      PropertyAddon = 2,
      PropertyRemoval = 3,
      PropertySetRemoval = 4,
      ElementRemoval = 5,
    }
    private JobSwitchOneofCase jobSwitchCase_ = JobSwitchOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JobSwitchOneofCase JobSwitchCase {
      get { return jobSwitchCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJobSwitch() {
      jobSwitchCase_ = JobSwitchOneofCase.None;
      jobSwitch_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Job);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Job other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PropertyPipe, other.PropertyPipe)) return false;
      if (!object.Equals(PropertyAddon, other.PropertyAddon)) return false;
      if (!object.Equals(PropertyRemoval, other.PropertyRemoval)) return false;
      if (!object.Equals(PropertySetRemoval, other.PropertySetRemoval)) return false;
      if (!object.Equals(ElementRemoval, other.ElementRemoval)) return false;
      if (JobSwitchCase != other.JobSwitchCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (jobSwitchCase_ == JobSwitchOneofCase.PropertyPipe) hash ^= PropertyPipe.GetHashCode();
      if (jobSwitchCase_ == JobSwitchOneofCase.PropertyAddon) hash ^= PropertyAddon.GetHashCode();
      if (jobSwitchCase_ == JobSwitchOneofCase.PropertyRemoval) hash ^= PropertyRemoval.GetHashCode();
      if (jobSwitchCase_ == JobSwitchOneofCase.PropertySetRemoval) hash ^= PropertySetRemoval.GetHashCode();
      if (jobSwitchCase_ == JobSwitchOneofCase.ElementRemoval) hash ^= ElementRemoval.GetHashCode();
      hash ^= (int) jobSwitchCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (jobSwitchCase_ == JobSwitchOneofCase.PropertyPipe) {
        output.WriteRawTag(10);
        output.WriteMessage(PropertyPipe);
      }
      if (jobSwitchCase_ == JobSwitchOneofCase.PropertyAddon) {
        output.WriteRawTag(18);
        output.WriteMessage(PropertyAddon);
      }
      if (jobSwitchCase_ == JobSwitchOneofCase.PropertyRemoval) {
        output.WriteRawTag(26);
        output.WriteMessage(PropertyRemoval);
      }
      if (jobSwitchCase_ == JobSwitchOneofCase.PropertySetRemoval) {
        output.WriteRawTag(34);
        output.WriteMessage(PropertySetRemoval);
      }
      if (jobSwitchCase_ == JobSwitchOneofCase.ElementRemoval) {
        output.WriteRawTag(42);
        output.WriteMessage(ElementRemoval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (jobSwitchCase_ == JobSwitchOneofCase.PropertyPipe) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PropertyPipe);
      }
      if (jobSwitchCase_ == JobSwitchOneofCase.PropertyAddon) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PropertyAddon);
      }
      if (jobSwitchCase_ == JobSwitchOneofCase.PropertyRemoval) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PropertyRemoval);
      }
      if (jobSwitchCase_ == JobSwitchOneofCase.PropertySetRemoval) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PropertySetRemoval);
      }
      if (jobSwitchCase_ == JobSwitchOneofCase.ElementRemoval) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElementRemoval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Job other) {
      if (other == null) {
        return;
      }
      switch (other.JobSwitchCase) {
        case JobSwitchOneofCase.PropertyPipe:
          if (PropertyPipe == null) {
            PropertyPipe = new global::Bitub.Dto.TRex.PropertyPipe();
          }
          PropertyPipe.MergeFrom(other.PropertyPipe);
          break;
        case JobSwitchOneofCase.PropertyAddon:
          if (PropertyAddon == null) {
            PropertyAddon = new global::Bitub.Dto.TRex.PropertyDef();
          }
          PropertyAddon.MergeFrom(other.PropertyAddon);
          break;
        case JobSwitchOneofCase.PropertyRemoval:
          if (PropertyRemoval == null) {
            PropertyRemoval = new global::Bitub.Dto.TRex.Property();
          }
          PropertyRemoval.MergeFrom(other.PropertyRemoval);
          break;
        case JobSwitchOneofCase.PropertySetRemoval:
          if (PropertySetRemoval == null) {
            PropertySetRemoval = new global::Bitub.Dto.Classifier();
          }
          PropertySetRemoval.MergeFrom(other.PropertySetRemoval);
          break;
        case JobSwitchOneofCase.ElementRemoval:
          if (ElementRemoval == null) {
            ElementRemoval = new global::Bitub.Dto.Classifier();
          }
          ElementRemoval.MergeFrom(other.ElementRemoval);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Bitub.Dto.TRex.PropertyPipe subBuilder = new global::Bitub.Dto.TRex.PropertyPipe();
            if (jobSwitchCase_ == JobSwitchOneofCase.PropertyPipe) {
              subBuilder.MergeFrom(PropertyPipe);
            }
            input.ReadMessage(subBuilder);
            PropertyPipe = subBuilder;
            break;
          }
          case 18: {
            global::Bitub.Dto.TRex.PropertyDef subBuilder = new global::Bitub.Dto.TRex.PropertyDef();
            if (jobSwitchCase_ == JobSwitchOneofCase.PropertyAddon) {
              subBuilder.MergeFrom(PropertyAddon);
            }
            input.ReadMessage(subBuilder);
            PropertyAddon = subBuilder;
            break;
          }
          case 26: {
            global::Bitub.Dto.TRex.Property subBuilder = new global::Bitub.Dto.TRex.Property();
            if (jobSwitchCase_ == JobSwitchOneofCase.PropertyRemoval) {
              subBuilder.MergeFrom(PropertyRemoval);
            }
            input.ReadMessage(subBuilder);
            PropertyRemoval = subBuilder;
            break;
          }
          case 34: {
            global::Bitub.Dto.Classifier subBuilder = new global::Bitub.Dto.Classifier();
            if (jobSwitchCase_ == JobSwitchOneofCase.PropertySetRemoval) {
              subBuilder.MergeFrom(PropertySetRemoval);
            }
            input.ReadMessage(subBuilder);
            PropertySetRemoval = subBuilder;
            break;
          }
          case 42: {
            global::Bitub.Dto.Classifier subBuilder = new global::Bitub.Dto.Classifier();
            if (jobSwitchCase_ == JobSwitchOneofCase.ElementRemoval) {
              subBuilder.MergeFrom(ElementRemoval);
            }
            input.ReadMessage(subBuilder);
            ElementRemoval = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A selector scope "selects" the transformation target
  /// </summary>
  public sealed partial class ElementScope : pb::IMessage<ElementScope> {
    private static readonly pb::MessageParser<ElementScope> _parser = new pb::MessageParser<ElementScope>(() => new ElementScope());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElementScope> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.TRex.TRexReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementScope() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementScope(ElementScope other) : this() {
      elements_ = other.elements_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementScope Clone() {
      return new ElementScope(this);
    }

    /// <summary>Field number for the "elements" field.</summary>
    public const int ElementsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bitub.Dto.Classifier> _repeated_elements_codec
        = pb::FieldCodec.ForMessage(10, global::Bitub.Dto.Classifier.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.Classifier> elements_ = new pbc::RepeatedField<global::Bitub.Dto.Classifier>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.Classifier> Elements {
      get { return elements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElementScope);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElementScope other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!elements_.Equals(other.elements_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= elements_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      elements_.WriteTo(output, _repeated_elements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += elements_.CalculateSize(_repeated_elements_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElementScope other) {
      if (other == null) {
        return;
      }
      elements_.Add(other.elements_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            elements_.AddEntriesFrom(input, _repeated_elements_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A property pipe declaration
  /// </summary>
  public sealed partial class PropertyPipe : pb::IMessage<PropertyPipe> {
    private static readonly pb::MessageParser<PropertyPipe> _parser = new pb::MessageParser<PropertyPipe>(() => new PropertyPipe());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertyPipe> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.TRex.TRexReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyPipe() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyPipe(PropertyPipe other) : this() {
      type_ = other.type_;
      source_ = other.source_ != null ? other.source_.Clone() : null;
      target_ = other.target_ != null ? other.target_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyPipe Clone() {
      return new PropertyPipe(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Bitub.Dto.TRex.PropertyPipe.Types.CollectorType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.TRex.PropertyPipe.Types.CollectorType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private global::Bitub.Dto.TRex.Property source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.TRex.Property Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 3;
    private global::Bitub.Dto.TRex.Property target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.TRex.Property Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropertyPipe);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropertyPipe other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Target, other.Target)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (target_ != null) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (source_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Source);
      }
      if (target_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropertyPipe other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.source_ != null) {
        if (source_ == null) {
          Source = new global::Bitub.Dto.TRex.Property();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.target_ != null) {
        if (target_ == null) {
          Target = new global::Bitub.Dto.TRex.Property();
        }
        Target.MergeFrom(other.Target);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Bitub.Dto.TRex.PropertyPipe.Types.CollectorType) input.ReadEnum();
            break;
          }
          case 18: {
            if (source_ == null) {
              Source = new global::Bitub.Dto.TRex.Property();
            }
            input.ReadMessage(Source);
            break;
          }
          case 26: {
            if (target_ == null) {
              Target = new global::Bitub.Dto.TRex.Property();
            }
            input.ReadMessage(Target);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PropertyPipe message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CollectorType {
        [pbr::OriginalName("LATEST")] Latest = 0,
        [pbr::OriginalName("FIRST")] First = 1,
        [pbr::OriginalName("ALL")] All = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// A property of model by classifier name
  /// </summary>
  public sealed partial class Property : pb::IMessage<Property> {
    private static readonly pb::MessageParser<Property> _parser = new pb::MessageParser<Property>(() => new Property());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Property> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.TRex.TRexReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Property() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Property(Property other) : this() {
      name_ = other.name_ != null ? other.name_.Clone() : null;
      scope_ = other.scope_ != null ? other.scope_.Clone() : null;
      unitType_ = other.unitType_ != null ? other.unitType_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Property Clone() {
      return new Property(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private global::Bitub.Dto.Qualifier name_;
    /// <summary>
    /// PSet.Name or .Name if any pset
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.Qualifier Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "scope" field.</summary>
    public const int ScopeFieldNumber = 2;
    private global::Bitub.Dto.TRex.ElementScope scope_;
    /// <summary>
    /// Classification matches
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.TRex.ElementScope Scope {
      get { return scope_; }
      set {
        scope_ = value;
      }
    }

    /// <summary>Field number for the "unitType" field.</summary>
    public const int UnitTypeFieldNumber = 3;
    private global::Bitub.Dto.TRex.PropertyUnitType unitType_;
    /// <summary>
    /// Property definition
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.TRex.PropertyUnitType UnitType {
      get { return unitType_; }
      set {
        unitType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Property);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Property other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Name, other.Name)) return false;
      if (!object.Equals(Scope, other.Scope)) return false;
      if (!object.Equals(UnitType, other.UnitType)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (name_ != null) hash ^= Name.GetHashCode();
      if (scope_ != null) hash ^= Scope.GetHashCode();
      if (unitType_ != null) hash ^= UnitType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (name_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Name);
      }
      if (scope_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Scope);
      }
      if (unitType_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UnitType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      if (scope_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scope);
      }
      if (unitType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnitType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Property other) {
      if (other == null) {
        return;
      }
      if (other.name_ != null) {
        if (name_ == null) {
          Name = new global::Bitub.Dto.Qualifier();
        }
        Name.MergeFrom(other.Name);
      }
      if (other.scope_ != null) {
        if (scope_ == null) {
          Scope = new global::Bitub.Dto.TRex.ElementScope();
        }
        Scope.MergeFrom(other.Scope);
      }
      if (other.unitType_ != null) {
        if (unitType_ == null) {
          UnitType = new global::Bitub.Dto.TRex.PropertyUnitType();
        }
        UnitType.MergeFrom(other.UnitType);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (name_ == null) {
              Name = new global::Bitub.Dto.Qualifier();
            }
            input.ReadMessage(Name);
            break;
          }
          case 18: {
            if (scope_ == null) {
              Scope = new global::Bitub.Dto.TRex.ElementScope();
            }
            input.ReadMessage(Scope);
            break;
          }
          case 26: {
            if (unitType_ == null) {
              UnitType = new global::Bitub.Dto.TRex.PropertyUnitType();
            }
            input.ReadMessage(UnitType);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Property declaration
  /// </summary>
  public sealed partial class PropertyDef : pb::IMessage<PropertyDef> {
    private static readonly pb::MessageParser<PropertyDef> _parser = new pb::MessageParser<PropertyDef>(() => new PropertyDef());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertyDef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.TRex.TRexReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyDef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyDef(PropertyDef other) : this() {
      property_ = other.property_ != null ? other.property_.Clone() : null;
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyDef Clone() {
      return new PropertyDef(this);
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private global::Bitub.Dto.TRex.Property property_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.TRex.Property Property {
      get { return property_; }
      set {
        property_ = value;
      }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bitub.Dto.TRex.PropertyValue> _repeated_values_codec
        = pb::FieldCodec.ForMessage(18, global::Bitub.Dto.TRex.PropertyValue.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Dto.TRex.PropertyValue> values_ = new pbc::RepeatedField<global::Bitub.Dto.TRex.PropertyValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Dto.TRex.PropertyValue> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropertyDef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropertyDef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Property, other.Property)) return false;
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (property_ != null) hash ^= Property.GetHashCode();
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (property_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Property);
      }
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (property_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
      }
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropertyDef other) {
      if (other == null) {
        return;
      }
      if (other.property_ != null) {
        if (property_ == null) {
          Property = new global::Bitub.Dto.TRex.Property();
        }
        Property.MergeFrom(other.Property);
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (property_ == null) {
              Property = new global::Bitub.Dto.TRex.Property();
            }
            input.ReadMessage(Property);
            break;
          }
          case 18: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Property value switch
  /// </summary>
  public sealed partial class PropertyValue : pb::IMessage<PropertyValue> {
    private static readonly pb::MessageParser<PropertyValue> _parser = new pb::MessageParser<PropertyValue>(() => new PropertyValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertyValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.TRex.TRexReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyValue(PropertyValue other) : this() {
      switch (other.ValueSwitchCase) {
        case ValueSwitchOneofCase.Digit:
          Digit = other.Digit;
          break;
        case ValueSwitchOneofCase.Serial:
          Serial = other.Serial;
          break;
        case ValueSwitchOneofCase.Id:
          Id = other.Id.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyValue Clone() {
      return new PropertyValue(this);
    }

    /// <summary>Field number for the "digit" field.</summary>
    public const int DigitFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Digit {
      get { return valueSwitchCase_ == ValueSwitchOneofCase.Digit ? (double) valueSwitch_ : 0D; }
      set {
        valueSwitch_ = value;
        valueSwitchCase_ = ValueSwitchOneofCase.Digit;
      }
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serial {
      get { return valueSwitchCase_ == ValueSwitchOneofCase.Serial ? (string) valueSwitch_ : ""; }
      set {
        valueSwitch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueSwitchCase_ = ValueSwitchOneofCase.Serial;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.GlobalUniqueId Id {
      get { return valueSwitchCase_ == ValueSwitchOneofCase.Id ? (global::Bitub.Dto.GlobalUniqueId) valueSwitch_ : null; }
      set {
        valueSwitch_ = value;
        valueSwitchCase_ = value == null ? ValueSwitchOneofCase.None : ValueSwitchOneofCase.Id;
      }
    }

    private object valueSwitch_;
    /// <summary>Enum of possible cases for the "valueSwitch" oneof.</summary>
    public enum ValueSwitchOneofCase {
      None = 0,
      Digit = 5,
      Serial = 6,
      Id = 7,
    }
    private ValueSwitchOneofCase valueSwitchCase_ = ValueSwitchOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueSwitchOneofCase ValueSwitchCase {
      get { return valueSwitchCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValueSwitch() {
      valueSwitchCase_ = ValueSwitchOneofCase.None;
      valueSwitch_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropertyValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropertyValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Digit, other.Digit)) return false;
      if (Serial != other.Serial) return false;
      if (!object.Equals(Id, other.Id)) return false;
      if (ValueSwitchCase != other.ValueSwitchCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueSwitchCase_ == ValueSwitchOneofCase.Digit) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Digit);
      if (valueSwitchCase_ == ValueSwitchOneofCase.Serial) hash ^= Serial.GetHashCode();
      if (valueSwitchCase_ == ValueSwitchOneofCase.Id) hash ^= Id.GetHashCode();
      hash ^= (int) valueSwitchCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueSwitchCase_ == ValueSwitchOneofCase.Digit) {
        output.WriteRawTag(41);
        output.WriteDouble(Digit);
      }
      if (valueSwitchCase_ == ValueSwitchOneofCase.Serial) {
        output.WriteRawTag(50);
        output.WriteString(Serial);
      }
      if (valueSwitchCase_ == ValueSwitchOneofCase.Id) {
        output.WriteRawTag(58);
        output.WriteMessage(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueSwitchCase_ == ValueSwitchOneofCase.Digit) {
        size += 1 + 8;
      }
      if (valueSwitchCase_ == ValueSwitchOneofCase.Serial) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (valueSwitchCase_ == ValueSwitchOneofCase.Id) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropertyValue other) {
      if (other == null) {
        return;
      }
      switch (other.ValueSwitchCase) {
        case ValueSwitchOneofCase.Digit:
          Digit = other.Digit;
          break;
        case ValueSwitchOneofCase.Serial:
          Serial = other.Serial;
          break;
        case ValueSwitchOneofCase.Id:
          if (Id == null) {
            Id = new global::Bitub.Dto.GlobalUniqueId();
          }
          Id.MergeFrom(other.Id);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 41: {
            Digit = input.ReadDouble();
            break;
          }
          case 50: {
            Serial = input.ReadString();
            break;
          }
          case 58: {
            global::Bitub.Dto.GlobalUniqueId subBuilder = new global::Bitub.Dto.GlobalUniqueId();
            if (valueSwitchCase_ == ValueSwitchOneofCase.Id) {
              subBuilder.MergeFrom(Id);
            }
            input.ReadMessage(subBuilder);
            Id = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Property unit type bound by type and unit
  /// </summary>
  public sealed partial class PropertyUnitType : pb::IMessage<PropertyUnitType> {
    private static readonly pb::MessageParser<PropertyUnitType> _parser = new pb::MessageParser<PropertyUnitType>(() => new PropertyUnitType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertyUnitType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Dto.TRex.TRexReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyUnitType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyUnitType(PropertyUnitType other) : this() {
      type_ = other.type_;
      unit_ = other.unit_;
      prefix_ = other.prefix_;
      dim_ = other.dim_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyUnitType Clone() {
      return new PropertyUnitType(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Bitub.Dto.TRex.PropertyType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.TRex.PropertyType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 2;
    private global::Bitub.Dto.TRex.UnitSI unit_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.TRex.UnitSI Unit {
      get { return unit_; }
      set {
        unit_ = value;
      }
    }

    /// <summary>Field number for the "prefix" field.</summary>
    public const int PrefixFieldNumber = 3;
    private global::Bitub.Dto.TRex.UnitPrefix prefix_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Dto.TRex.UnitPrefix Prefix {
      get { return prefix_; }
      set {
        prefix_ = value;
      }
    }

    /// <summary>Field number for the "dim" field.</summary>
    public const int DimFieldNumber = 4;
    private uint dim_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Dim {
      get { return dim_; }
      set {
        dim_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropertyUnitType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropertyUnitType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Unit != other.Unit) return false;
      if (Prefix != other.Prefix) return false;
      if (Dim != other.Dim) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Unit != 0) hash ^= Unit.GetHashCode();
      if (Prefix != 0) hash ^= Prefix.GetHashCode();
      if (Dim != 0) hash ^= Dim.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Unit != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Unit);
      }
      if (Prefix != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Prefix);
      }
      if (Dim != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Dim);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Unit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Unit);
      }
      if (Prefix != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Prefix);
      }
      if (Dim != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Dim);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropertyUnitType other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Unit != 0) {
        Unit = other.Unit;
      }
      if (other.Prefix != 0) {
        Prefix = other.Prefix;
      }
      if (other.Dim != 0) {
        Dim = other.Dim;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Bitub.Dto.TRex.PropertyType) input.ReadEnum();
            break;
          }
          case 16: {
            Unit = (global::Bitub.Dto.TRex.UnitSI) input.ReadEnum();
            break;
          }
          case 24: {
            Prefix = (global::Bitub.Dto.TRex.UnitPrefix) input.ReadEnum();
            break;
          }
          case 32: {
            Dim = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
