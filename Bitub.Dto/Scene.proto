syntax = "proto3";
package Bitub.Dto.Scene;

// Version 1.2
import "Common.proto";
import "Concept.proto";
import "Spatial.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "Bitub.Dto.Scene";
option java_package = "bitub.dto";

// Orientation either CCW or CW
enum Orientation {
	UNKNOWN = 0;
	CCW = 1;
	CW = 2;
}

// Facet Type
enum FacetType {
    UNDEFINED = 0;
	TRI_MESH = 1;
	TRI_STRIPE = 2;
	TRI_FAN = 3;
	QUAD_MESH = 4;
}

// Generic mesh
message Mesh {
	FacetType type = 1;
	Orientation orient = 2;
    repeated uint32 vertex = 3;
	repeated float normal = 4;
	repeated float uv = 5;
}

// A generic meshed face
message Face {
	Orientation orient = 1;
    repeated uint32 loop = 2;
	repeated float uv = 3;
	bool isPlanar = 4;
	Mesh mesh = 5;
}

// UV concept
message UV {
	float u = 1;
	float v = 2;
}

// Labeled point of a Wire
message Point {		
	string label = 1;
	uint32 vertex = 2;
}

// Labeled path of a Wire
message Patch {			
	string label = 1;
	bool isLoop = 2;
	repeated uint32 vertex = 3;
}

// XYZ Container
message PtArray {
	repeated float xyz = 1;
}

// A BREP body face container
message FaceBody {
	uint32 ptSet = 1;
	RefId material = 2;
	bool isShell = 3; 
	bool isConvex = 4;	
	
	Transform transform = 10;
	repeated Face faces = 11;	
}

// A wired body container
message WireBody {
	uint32 ptSet = 1;
	RefId material = 2;

	Transform transform = 10;
    repeated Patch patches = 11;
	repeated Point singletons = 12;
}

message Quaternion {
	float x = 1;
	float y = 2;
	float z = 3;
	float w = 4;
}

message Rotation {
    Bitub.Dto.Spatial.XYZ rx = 1;
	Bitub.Dto.Spatial.XYZ ry = 2;
	Bitub.Dto.Spatial.XYZ rz = 3;
}

// A transform is either a rotation matrix or a quaternion description
message Transform {
	oneof rotationOrQuaternion {
		Rotation r = 1;
		Quaternion q = 2;
	}
	Bitub.Dto.Spatial.XYZ t = 3;
}

// All bodies inside share the same vertex basis and context classification.
message Representation {
	string context = 1;

	Bitub.Dto.Spatial.BoundingBox boundingBox = 3;	

	repeated PtArray points = 5;
	repeated FaceBody bodies = 6;	
	repeated WireBody wires = 7;
}

// Atomic part of a component
message Component {
    GlobalUniqueId id = 1;
	GlobalUniqueId parent = 2;
	string name = 5;
	repeated Classifier concepts = 6;	
	repeated GlobalUniqueId children = 7;
	repeated Representation representations = 8;
	repeated Bitub.Dto.Concept.FeatureConcept features = 9;
}

// Material 
message Material {
    RefId id = 1;
    string name = 2;
	bool hintRenderBothFaces = 3;
	bool hintSwitchFrontRearFaces = 4;
	repeated ColorOrNormalised colorChannels = 6;
	string hintReflectionShader = 9;
}

// Color channel
enum ColorChannel {
    Albedo = 0;
	Diffuse = 1;
	Reflective = 2;
	Specular = 3;
	Emmisive = 4;
	DiffuseEmmisive = 5;
}

// Select of absolute color or normalised (gray scale) color
message ColorOrNormalised {
	ColorChannel channel = 1;
	oneof colorOrValue {
		Color color = 2;
		float normalised = 3;
	}
}

// Basic color and alpha
message Color {
    float R = 1;
	float G = 2;
	float B = 3;
	float A = 4;
}

// Scene meta data
message SceneMetaData {
	GlobalUniqueId id = 1;
	Qualifier project = 2;
	string description = 3;

	Bitub.Dto.Spatial.LatLon  wgs84 = 4;
	string crs = 5;
	string hrs = 6;
}

// Global root message
message SceneModel {
	// SceneMetaData metadata = 1;
	GlobalUniqueId id = 1;
    string name = 2;
	
	float unitsPerMeter = 3;
	google.protobuf.Timestamp stamp = 4;

	repeated SceneContext contexts = 5;
	repeated Material materials = 6;
	repeated Component components = 7;	
}

// Context related data
message SceneContext {
	string name = 1;
	double fDeflection = 2;
	double fTolerance = 3;
	Transform wcs = 5;
	repeated Bitub.Dto.Spatial.Region regions = 6;
}

// Scene request data type
enum SceneDataType {
	METADATA = 0;
	COMPONENT = 1;
	MATERIAL = 2;
	CLASSIFICATION = 4;
	FEATURES = 8;

	COMPONENT_AND_MATERIAL = 3;
	FULL_COMPONENT = 7;
	ALL = 15;	
}

// A spatial sceene request
message SceneModelRequest {
	RefId id = 1;
	Qualifier scene = 2;
	SceneDataType sceneDataType = 3;

	oneof viewpointOrABox {
		Bitub.Dto.Spatial.Viewpoint viewpoint = 4;
		Bitub.Dto.Spatial.ABox abox = 5;
	}

	// If true, only deliver new data
	Qualifier requestToken = 6;
	// Prefilter scene by qualifiers (based on scene components classification)
	repeated Qualifier filter = 7; 
}