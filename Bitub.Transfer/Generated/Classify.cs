// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Classify.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bitub.Transfer.Classify {

  /// <summary>Holder for reflection information generated from Classify.proto</summary>
  public static partial class ClassifyReflection {

    #region Descriptor
    /// <summary>File descriptor for Classify.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClassifyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5DbGFzc2lmeS5wcm90bxIXQml0dWIuVHJhbnNmZXIuQ2xhc3NpZnkaDENv",
            "bW1vbi5wcm90byI7CghPbnRvbG9neRIvCgtjbGFzc2lmaWVycxgBIAMoCzIa",
            "LkJpdHViLlRyYW5zZmVyLkNsYXNzaWZpZXIi5gEKB0NvbmNlcHQSJwoEbmFt",
            "ZRgBIAEoCzIZLkJpdHViLlRyYW5zZmVyLlF1YWxpZmllchI6Cgpjb25qdW5j",
            "dGVkGAIgASgLMiQuQml0dWIuVHJhbnNmZXIuQ2xhc3NpZnkuQ29uanVuY3Rp",
            "b25IABI6Cgdjb25jZXB0GAMgASgLMicuQml0dWIuVHJhbnNmZXIuQ2xhc3Np",
            "ZnkuRmVhdHVyZUNvbmNlcHRIABIrCghzdWJzdW1lcxgEIAMoCzIZLkJpdHVi",
            "LlRyYW5zZmVyLlF1YWxpZmllckINCgtjb25jZXB0S2luZCI6CgtDb25qdW5j",
            "dGlvbhIrCghjb25jZXB0cxgCIAMoCzIZLkJpdHViLlRyYW5zZmVyLlF1YWxp",
            "ZmllciKEAQoORmVhdHVyZUNvbmNlcHQSDQoFbGFiZWwYASABKAkSKwoCb3AY",
            "AiABKA4yHy5CaXR1Yi5UcmFuc2Zlci5DbGFzc2lmeS5Sb2xlT3ASNgoIZmVh",
            "dHVyZXMYAyADKAsyJC5CaXR1Yi5UcmFuc2Zlci5DbGFzc2lmeS5GZWF0dXJl",
            "Um9sZSKxAQoLRmVhdHVyZVJvbGUSJwoEbmFtZRgBIAEoCzIZLkJpdHViLlRy",
            "YW5zZmVyLlF1YWxpZmllchI0CgRkYXRhGAMgASgLMiQuQml0dWIuVHJhbnNm",
            "ZXIuQ2xhc3NpZnkuRGF0YUNvbmNlcHRIABIrCgZmaWxsZXIYBCABKAsyGS5C",
            "aXR1Yi5UcmFuc2Zlci5RdWFsaWZpZXJIAEIWChRjb25jZXB0T3JEYXRhRmVh",
            "dHVyZSKkAQoLRGF0YUNvbmNlcHQSLwoEdHlwZRgBIAEoDjIhLkJpdHViLlRy",
            "YW5zZmVyLkNsYXNzaWZ5LkRhdGFUeXBlEisKAm9wGAIgASgOMh8uQml0dWIu",
            "VHJhbnNmZXIuQ2xhc3NpZnkuRGF0YU9wEg8KBWRpZ2l0GAMgASgBSAASFAoK",
            "c2VyaWFsaXplZBgEIAEoCUgAQhAKDm51bWJlck9yU3RyaW5nKkwKCERhdGFU",
            "eXBlEgoKBlNUUklORxAAEgsKB0lOVEVHRVIQARILCgdERUNJTUFMEAISCwoH",
            "Qk9PTEVBThADEg0KCVRJTUVTVEFNUBAEKh4KBlJvbGVPcBIJCgVBbGxPZhAA",
            "EgkKBU9uZU9mEAEqVgoGRGF0YU9wEgoKBkVxdWFscxAAEggKBExlc3MQARIS",
            "Cg5MZXNzVGhhbkVxdWFscxACEgsKB0dyZWF0ZXIQAxIVChFHcmVhdGVyVGhh",
            "bkVxdWFscxAEQjMKF2JpdHViLnRyYW5zZmVyLmNsYXNzaWZ5qgIXQml0dWIu",
            "VHJhbnNmZXIuQ2xhc3NpZnliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Bitub.Transfer.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Bitub.Transfer.Classify.DataType), typeof(global::Bitub.Transfer.Classify.RoleOp), typeof(global::Bitub.Transfer.Classify.DataOp), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Transfer.Classify.Ontology), global::Bitub.Transfer.Classify.Ontology.Parser, new[]{ "Classifiers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Transfer.Classify.Concept), global::Bitub.Transfer.Classify.Concept.Parser, new[]{ "Name", "Conjuncted", "Concept_", "Subsumes" }, new[]{ "ConceptKind" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Transfer.Classify.Conjunction), global::Bitub.Transfer.Classify.Conjunction.Parser, new[]{ "Concepts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Transfer.Classify.FeatureConcept), global::Bitub.Transfer.Classify.FeatureConcept.Parser, new[]{ "Label", "Op", "Features" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Transfer.Classify.FeatureRole), global::Bitub.Transfer.Classify.FeatureRole.Parser, new[]{ "Name", "Data", "Filler" }, new[]{ "ConceptOrDataFeature" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bitub.Transfer.Classify.DataConcept), global::Bitub.Transfer.Classify.DataConcept.Parser, new[]{ "Type", "Op", "Digit", "Serialized" }, new[]{ "NumberOrString" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// The feature data type
  /// </summary>
  public enum DataType {
    [pbr::OriginalName("STRING")] String = 0,
    [pbr::OriginalName("INTEGER")] Integer = 1,
    [pbr::OriginalName("DECIMAL")] Decimal = 2,
    [pbr::OriginalName("BOOLEAN")] Boolean = 3,
    [pbr::OriginalName("TIMESTAMP")] Timestamp = 4,
  }

  /// <summary>
  /// The feature role operator
  /// </summary>
  public enum RoleOp {
    [pbr::OriginalName("AllOf")] AllOf = 0,
    [pbr::OriginalName("OneOf")] OneOf = 1,
  }

  /// <summary>
  /// The feature data operator
  /// </summary>
  public enum DataOp {
    [pbr::OriginalName("Equals")] Equals = 0,
    [pbr::OriginalName("Less")] Less = 1,
    [pbr::OriginalName("LessThanEquals")] LessThanEquals = 2,
    [pbr::OriginalName("Greater")] Greater = 3,
    [pbr::OriginalName("GreaterThanEquals")] GreaterThanEquals = 4,
  }

  #endregion

  #region Messages
  public sealed partial class Ontology : pb::IMessage<Ontology> {
    private static readonly pb::MessageParser<Ontology> _parser = new pb::MessageParser<Ontology>(() => new Ontology());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ontology> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Transfer.Classify.ClassifyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ontology() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ontology(Ontology other) : this() {
      classifiers_ = other.classifiers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ontology Clone() {
      return new Ontology(this);
    }

    /// <summary>Field number for the "classifiers" field.</summary>
    public const int ClassifiersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bitub.Transfer.Classifier> _repeated_classifiers_codec
        = pb::FieldCodec.ForMessage(10, global::Bitub.Transfer.Classifier.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Transfer.Classifier> classifiers_ = new pbc::RepeatedField<global::Bitub.Transfer.Classifier>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Transfer.Classifier> Classifiers {
      get { return classifiers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ontology);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ontology other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!classifiers_.Equals(other.classifiers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= classifiers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      classifiers_.WriteTo(output, _repeated_classifiers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += classifiers_.CalculateSize(_repeated_classifiers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ontology other) {
      if (other == null) {
        return;
      }
      classifiers_.Add(other.classifiers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            classifiers_.AddEntriesFrom(input, _repeated_classifiers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Concept : pb::IMessage<Concept> {
    private static readonly pb::MessageParser<Concept> _parser = new pb::MessageParser<Concept>(() => new Concept());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Concept> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Transfer.Classify.ClassifyReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Concept() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Concept(Concept other) : this() {
      name_ = other.name_ != null ? other.name_.Clone() : null;
      subsumes_ = other.subsumes_.Clone();
      switch (other.ConceptKindCase) {
        case ConceptKindOneofCase.Conjuncted:
          Conjuncted = other.Conjuncted.Clone();
          break;
        case ConceptKindOneofCase.Concept_:
          Concept_ = other.Concept_.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Concept Clone() {
      return new Concept(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private global::Bitub.Transfer.Qualifier name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Transfer.Qualifier Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "conjuncted" field.</summary>
    public const int ConjunctedFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Transfer.Classify.Conjunction Conjuncted {
      get { return conceptKindCase_ == ConceptKindOneofCase.Conjuncted ? (global::Bitub.Transfer.Classify.Conjunction) conceptKind_ : null; }
      set {
        conceptKind_ = value;
        conceptKindCase_ = value == null ? ConceptKindOneofCase.None : ConceptKindOneofCase.Conjuncted;
      }
    }

    /// <summary>Field number for the "concept" field.</summary>
    public const int Concept_FieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Transfer.Classify.FeatureConcept Concept_ {
      get { return conceptKindCase_ == ConceptKindOneofCase.Concept_ ? (global::Bitub.Transfer.Classify.FeatureConcept) conceptKind_ : null; }
      set {
        conceptKind_ = value;
        conceptKindCase_ = value == null ? ConceptKindOneofCase.None : ConceptKindOneofCase.Concept_;
      }
    }

    /// <summary>Field number for the "subsumes" field.</summary>
    public const int SubsumesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Bitub.Transfer.Qualifier> _repeated_subsumes_codec
        = pb::FieldCodec.ForMessage(34, global::Bitub.Transfer.Qualifier.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Transfer.Qualifier> subsumes_ = new pbc::RepeatedField<global::Bitub.Transfer.Qualifier>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Transfer.Qualifier> Subsumes {
      get { return subsumes_; }
    }

    private object conceptKind_;
    /// <summary>Enum of possible cases for the "conceptKind" oneof.</summary>
    public enum ConceptKindOneofCase {
      None = 0,
      Conjuncted = 2,
      Concept_ = 3,
    }
    private ConceptKindOneofCase conceptKindCase_ = ConceptKindOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptKindOneofCase ConceptKindCase {
      get { return conceptKindCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConceptKind() {
      conceptKindCase_ = ConceptKindOneofCase.None;
      conceptKind_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Concept);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Concept other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Name, other.Name)) return false;
      if (!object.Equals(Conjuncted, other.Conjuncted)) return false;
      if (!object.Equals(Concept_, other.Concept_)) return false;
      if(!subsumes_.Equals(other.subsumes_)) return false;
      if (ConceptKindCase != other.ConceptKindCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (name_ != null) hash ^= Name.GetHashCode();
      if (conceptKindCase_ == ConceptKindOneofCase.Conjuncted) hash ^= Conjuncted.GetHashCode();
      if (conceptKindCase_ == ConceptKindOneofCase.Concept_) hash ^= Concept_.GetHashCode();
      hash ^= subsumes_.GetHashCode();
      hash ^= (int) conceptKindCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (name_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Name);
      }
      if (conceptKindCase_ == ConceptKindOneofCase.Conjuncted) {
        output.WriteRawTag(18);
        output.WriteMessage(Conjuncted);
      }
      if (conceptKindCase_ == ConceptKindOneofCase.Concept_) {
        output.WriteRawTag(26);
        output.WriteMessage(Concept_);
      }
      subsumes_.WriteTo(output, _repeated_subsumes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      if (conceptKindCase_ == ConceptKindOneofCase.Conjuncted) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Conjuncted);
      }
      if (conceptKindCase_ == ConceptKindOneofCase.Concept_) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Concept_);
      }
      size += subsumes_.CalculateSize(_repeated_subsumes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Concept other) {
      if (other == null) {
        return;
      }
      if (other.name_ != null) {
        if (name_ == null) {
          Name = new global::Bitub.Transfer.Qualifier();
        }
        Name.MergeFrom(other.Name);
      }
      subsumes_.Add(other.subsumes_);
      switch (other.ConceptKindCase) {
        case ConceptKindOneofCase.Conjuncted:
          if (Conjuncted == null) {
            Conjuncted = new global::Bitub.Transfer.Classify.Conjunction();
          }
          Conjuncted.MergeFrom(other.Conjuncted);
          break;
        case ConceptKindOneofCase.Concept_:
          if (Concept_ == null) {
            Concept_ = new global::Bitub.Transfer.Classify.FeatureConcept();
          }
          Concept_.MergeFrom(other.Concept_);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (name_ == null) {
              Name = new global::Bitub.Transfer.Qualifier();
            }
            input.ReadMessage(Name);
            break;
          }
          case 18: {
            global::Bitub.Transfer.Classify.Conjunction subBuilder = new global::Bitub.Transfer.Classify.Conjunction();
            if (conceptKindCase_ == ConceptKindOneofCase.Conjuncted) {
              subBuilder.MergeFrom(Conjuncted);
            }
            input.ReadMessage(subBuilder);
            Conjuncted = subBuilder;
            break;
          }
          case 26: {
            global::Bitub.Transfer.Classify.FeatureConcept subBuilder = new global::Bitub.Transfer.Classify.FeatureConcept();
            if (conceptKindCase_ == ConceptKindOneofCase.Concept_) {
              subBuilder.MergeFrom(Concept_);
            }
            input.ReadMessage(subBuilder);
            Concept_ = subBuilder;
            break;
          }
          case 34: {
            subsumes_.AddEntriesFrom(input, _repeated_subsumes_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A concept template as conjunction of concepts
  /// </summary>
  public sealed partial class Conjunction : pb::IMessage<Conjunction> {
    private static readonly pb::MessageParser<Conjunction> _parser = new pb::MessageParser<Conjunction>(() => new Conjunction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Conjunction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Transfer.Classify.ClassifyReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Conjunction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Conjunction(Conjunction other) : this() {
      concepts_ = other.concepts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Conjunction Clone() {
      return new Conjunction(this);
    }

    /// <summary>Field number for the "concepts" field.</summary>
    public const int ConceptsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Bitub.Transfer.Qualifier> _repeated_concepts_codec
        = pb::FieldCodec.ForMessage(18, global::Bitub.Transfer.Qualifier.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Transfer.Qualifier> concepts_ = new pbc::RepeatedField<global::Bitub.Transfer.Qualifier>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Transfer.Qualifier> Concepts {
      get { return concepts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Conjunction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Conjunction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!concepts_.Equals(other.concepts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= concepts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      concepts_.WriteTo(output, _repeated_concepts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += concepts_.CalculateSize(_repeated_concepts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Conjunction other) {
      if (other == null) {
        return;
      }
      concepts_.Add(other.concepts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            concepts_.AddEntriesFrom(input, _repeated_concepts_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A concept template based on features
  /// </summary>
  public sealed partial class FeatureConcept : pb::IMessage<FeatureConcept> {
    private static readonly pb::MessageParser<FeatureConcept> _parser = new pb::MessageParser<FeatureConcept>(() => new FeatureConcept());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeatureConcept> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Transfer.Classify.ClassifyReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureConcept() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureConcept(FeatureConcept other) : this() {
      label_ = other.label_;
      op_ = other.op_;
      features_ = other.features_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureConcept Clone() {
      return new FeatureConcept(this);
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 1;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 2;
    private global::Bitub.Transfer.Classify.RoleOp op_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Transfer.Classify.RoleOp Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bitub.Transfer.Classify.FeatureRole> _repeated_features_codec
        = pb::FieldCodec.ForMessage(26, global::Bitub.Transfer.Classify.FeatureRole.Parser);
    private readonly pbc::RepeatedField<global::Bitub.Transfer.Classify.FeatureRole> features_ = new pbc::RepeatedField<global::Bitub.Transfer.Classify.FeatureRole>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bitub.Transfer.Classify.FeatureRole> Features {
      get { return features_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeatureConcept);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeatureConcept other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Label != other.Label) return false;
      if (Op != other.Op) return false;
      if(!features_.Equals(other.features_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Op != 0) hash ^= Op.GetHashCode();
      hash ^= features_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Label.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Label);
      }
      if (Op != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Op);
      }
      features_.WriteTo(output, _repeated_features_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
      }
      size += features_.CalculateSize(_repeated_features_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeatureConcept other) {
      if (other == null) {
        return;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Op != 0) {
        Op = other.Op;
      }
      features_.Add(other.features_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Label = input.ReadString();
            break;
          }
          case 16: {
            Op = (global::Bitub.Transfer.Classify.RoleOp) input.ReadEnum();
            break;
          }
          case 26: {
            features_.AddEntriesFrom(input, _repeated_features_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A data or role feature
  /// </summary>
  public sealed partial class FeatureRole : pb::IMessage<FeatureRole> {
    private static readonly pb::MessageParser<FeatureRole> _parser = new pb::MessageParser<FeatureRole>(() => new FeatureRole());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeatureRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Transfer.Classify.ClassifyReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureRole(FeatureRole other) : this() {
      name_ = other.name_ != null ? other.name_.Clone() : null;
      switch (other.ConceptOrDataFeatureCase) {
        case ConceptOrDataFeatureOneofCase.Data:
          Data = other.Data.Clone();
          break;
        case ConceptOrDataFeatureOneofCase.Filler:
          Filler = other.Filler.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeatureRole Clone() {
      return new FeatureRole(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private global::Bitub.Transfer.Qualifier name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Transfer.Qualifier Name {
      get { return name_; }
      set {
        name_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Transfer.Classify.DataConcept Data {
      get { return conceptOrDataFeatureCase_ == ConceptOrDataFeatureOneofCase.Data ? (global::Bitub.Transfer.Classify.DataConcept) conceptOrDataFeature_ : null; }
      set {
        conceptOrDataFeature_ = value;
        conceptOrDataFeatureCase_ = value == null ? ConceptOrDataFeatureOneofCase.None : ConceptOrDataFeatureOneofCase.Data;
      }
    }

    /// <summary>Field number for the "filler" field.</summary>
    public const int FillerFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Transfer.Qualifier Filler {
      get { return conceptOrDataFeatureCase_ == ConceptOrDataFeatureOneofCase.Filler ? (global::Bitub.Transfer.Qualifier) conceptOrDataFeature_ : null; }
      set {
        conceptOrDataFeature_ = value;
        conceptOrDataFeatureCase_ = value == null ? ConceptOrDataFeatureOneofCase.None : ConceptOrDataFeatureOneofCase.Filler;
      }
    }

    private object conceptOrDataFeature_;
    /// <summary>Enum of possible cases for the "conceptOrDataFeature" oneof.</summary>
    public enum ConceptOrDataFeatureOneofCase {
      None = 0,
      Data = 3,
      Filler = 4,
    }
    private ConceptOrDataFeatureOneofCase conceptOrDataFeatureCase_ = ConceptOrDataFeatureOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptOrDataFeatureOneofCase ConceptOrDataFeatureCase {
      get { return conceptOrDataFeatureCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearConceptOrDataFeature() {
      conceptOrDataFeatureCase_ = ConceptOrDataFeatureOneofCase.None;
      conceptOrDataFeature_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeatureRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeatureRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Name, other.Name)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (!object.Equals(Filler, other.Filler)) return false;
      if (ConceptOrDataFeatureCase != other.ConceptOrDataFeatureCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (name_ != null) hash ^= Name.GetHashCode();
      if (conceptOrDataFeatureCase_ == ConceptOrDataFeatureOneofCase.Data) hash ^= Data.GetHashCode();
      if (conceptOrDataFeatureCase_ == ConceptOrDataFeatureOneofCase.Filler) hash ^= Filler.GetHashCode();
      hash ^= (int) conceptOrDataFeatureCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (name_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Name);
      }
      if (conceptOrDataFeatureCase_ == ConceptOrDataFeatureOneofCase.Data) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
      if (conceptOrDataFeatureCase_ == ConceptOrDataFeatureOneofCase.Filler) {
        output.WriteRawTag(34);
        output.WriteMessage(Filler);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (name_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Name);
      }
      if (conceptOrDataFeatureCase_ == ConceptOrDataFeatureOneofCase.Data) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (conceptOrDataFeatureCase_ == ConceptOrDataFeatureOneofCase.Filler) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filler);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeatureRole other) {
      if (other == null) {
        return;
      }
      if (other.name_ != null) {
        if (name_ == null) {
          Name = new global::Bitub.Transfer.Qualifier();
        }
        Name.MergeFrom(other.Name);
      }
      switch (other.ConceptOrDataFeatureCase) {
        case ConceptOrDataFeatureOneofCase.Data:
          if (Data == null) {
            Data = new global::Bitub.Transfer.Classify.DataConcept();
          }
          Data.MergeFrom(other.Data);
          break;
        case ConceptOrDataFeatureOneofCase.Filler:
          if (Filler == null) {
            Filler = new global::Bitub.Transfer.Qualifier();
          }
          Filler.MergeFrom(other.Filler);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (name_ == null) {
              Name = new global::Bitub.Transfer.Qualifier();
            }
            input.ReadMessage(Name);
            break;
          }
          case 26: {
            global::Bitub.Transfer.Classify.DataConcept subBuilder = new global::Bitub.Transfer.Classify.DataConcept();
            if (conceptOrDataFeatureCase_ == ConceptOrDataFeatureOneofCase.Data) {
              subBuilder.MergeFrom(Data);
            }
            input.ReadMessage(subBuilder);
            Data = subBuilder;
            break;
          }
          case 34: {
            global::Bitub.Transfer.Qualifier subBuilder = new global::Bitub.Transfer.Qualifier();
            if (conceptOrDataFeatureCase_ == ConceptOrDataFeatureOneofCase.Filler) {
              subBuilder.MergeFrom(Filler);
            }
            input.ReadMessage(subBuilder);
            Filler = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A feature data concept
  /// </summary>
  public sealed partial class DataConcept : pb::IMessage<DataConcept> {
    private static readonly pb::MessageParser<DataConcept> _parser = new pb::MessageParser<DataConcept>(() => new DataConcept());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataConcept> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bitub.Transfer.Classify.ClassifyReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataConcept() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataConcept(DataConcept other) : this() {
      type_ = other.type_;
      op_ = other.op_;
      switch (other.NumberOrStringCase) {
        case NumberOrStringOneofCase.Digit:
          Digit = other.Digit;
          break;
        case NumberOrStringOneofCase.Serialized:
          Serialized = other.Serialized;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataConcept Clone() {
      return new DataConcept(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Bitub.Transfer.Classify.DataType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Transfer.Classify.DataType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 2;
    private global::Bitub.Transfer.Classify.DataOp op_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bitub.Transfer.Classify.DataOp Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "digit" field.</summary>
    public const int DigitFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Digit {
      get { return numberOrStringCase_ == NumberOrStringOneofCase.Digit ? (double) numberOrString_ : 0D; }
      set {
        numberOrString_ = value;
        numberOrStringCase_ = NumberOrStringOneofCase.Digit;
      }
    }

    /// <summary>Field number for the "serialized" field.</summary>
    public const int SerializedFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serialized {
      get { return numberOrStringCase_ == NumberOrStringOneofCase.Serialized ? (string) numberOrString_ : ""; }
      set {
        numberOrString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        numberOrStringCase_ = NumberOrStringOneofCase.Serialized;
      }
    }

    private object numberOrString_;
    /// <summary>Enum of possible cases for the "numberOrString" oneof.</summary>
    public enum NumberOrStringOneofCase {
      None = 0,
      Digit = 3,
      Serialized = 4,
    }
    private NumberOrStringOneofCase numberOrStringCase_ = NumberOrStringOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumberOrStringOneofCase NumberOrStringCase {
      get { return numberOrStringCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNumberOrString() {
      numberOrStringCase_ = NumberOrStringOneofCase.None;
      numberOrString_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataConcept);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataConcept other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Op != other.Op) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Digit, other.Digit)) return false;
      if (Serialized != other.Serialized) return false;
      if (NumberOrStringCase != other.NumberOrStringCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Op != 0) hash ^= Op.GetHashCode();
      if (numberOrStringCase_ == NumberOrStringOneofCase.Digit) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Digit);
      if (numberOrStringCase_ == NumberOrStringOneofCase.Serialized) hash ^= Serialized.GetHashCode();
      hash ^= (int) numberOrStringCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Op != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Op);
      }
      if (numberOrStringCase_ == NumberOrStringOneofCase.Digit) {
        output.WriteRawTag(25);
        output.WriteDouble(Digit);
      }
      if (numberOrStringCase_ == NumberOrStringOneofCase.Serialized) {
        output.WriteRawTag(34);
        output.WriteString(Serialized);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Op != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Op);
      }
      if (numberOrStringCase_ == NumberOrStringOneofCase.Digit) {
        size += 1 + 8;
      }
      if (numberOrStringCase_ == NumberOrStringOneofCase.Serialized) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serialized);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataConcept other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Op != 0) {
        Op = other.Op;
      }
      switch (other.NumberOrStringCase) {
        case NumberOrStringOneofCase.Digit:
          Digit = other.Digit;
          break;
        case NumberOrStringOneofCase.Serialized:
          Serialized = other.Serialized;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Bitub.Transfer.Classify.DataType) input.ReadEnum();
            break;
          }
          case 16: {
            Op = (global::Bitub.Transfer.Classify.DataOp) input.ReadEnum();
            break;
          }
          case 25: {
            Digit = input.ReadDouble();
            break;
          }
          case 34: {
            Serialized = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
